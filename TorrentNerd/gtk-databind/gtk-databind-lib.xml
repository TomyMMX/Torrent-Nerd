<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/matooo/Projects/gtk-databind/bin/Release/gtk-databind-lib</name>
    </assembly>
    <members>
        <member name="T:Gtk.DataBindings.DataBin">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBin.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.GetDataFromDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataBin.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.#ctor">
            <summary>
            Creates DataBox
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.#ctor(System.String)">
            <summary>
            Creates DataBox
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.#ctor(System.Object,System.String)">
            <summary>
            Creates DataBox
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataBox.Finalize">
            <summary>
            Disconnects and destroys DataBox
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataButton">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.#ctor">
            <summary>
            Creates DataButton
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.#ctor(System.String)">
            <summary>
            Creates DataButton
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.#ctor(System.Object,System.String)">
            <summary>
            Creates DataButton
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButton.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButton.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButton.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButton.Finalize">
            <summary>
            Disconnects and destroys DataButton
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataButtonBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.#ctor">
            <summary>
            Creates DataButtonBox
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.#ctor(System.String)">
            <summary>
            Creates DataButtonBox
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.#ctor(System.Object,System.String)">
            <summary>
            Creates DataButtonBox
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataButtonBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            </summary>
            <param name="o">
            A <see cref="T:System.Object" /></param>
            <param name="a">
            A <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataButtonBox.Finalize">
            <summary>
            Disconnects and destroys DataButtonBox
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataCalendar">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.#ctor">
            <summary>
            Creates DataCalendar
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.#ctor(System.String)">
            <summary>
            Creates DataCalendar
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.#ctor(System.Object,System.String)">
            <summary>
            Creates DataCalendar
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataCalendar.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataCalendar.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCalendar.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.GetDataFromDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.OnDaySelected">
            <summary>
            Overrides OnDaySelected and posts data to DataSource
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCalendar.Finalize">
            <summary>
            Destroys and disconnects DataCalendar
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataCheckButton">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.#ctor">
            <summary>
            Creates DataCheckButton
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.#ctor(System.String)">
            <summary>
            Creates DataCheckButton
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.#ctor(System.Object,System.String)">
            <summary>
            Creates DataCheckButton
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataCheckButton.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataCheckButton.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.InheritedBoundaryDataSource">
            <summary>
            Defines if BoundaryDataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.BoundaryDataSource">
            <summary>
            BoundaryDataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.BoundaryMappings">
            <summary>
            Link to BoundaryMappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.Editable">
            <value>
            Specifies if widget is editable or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckButton.AutomaticTitle">
            <value>
            Specifies if title should be automaticaly resolved trough
            attribute processing based on mapping
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.OnToggled">
            <summary>
            Overrides OnToggled to put data into object if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.InitializeInternals">
            <summary>
            Initializes internals
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckButton.Finalize">
            <summary>
            Destroys and disconnects DataCheckBox
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataCheckMenuItem">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.#ctor">
            <summary>
            Creates DataCheckButton
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.#ctor(System.String)">
            <summary>
            Creates DataCheckButton
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckMenuItem.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckMenuItem.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckMenuItem.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataCheckMenuItem.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataCheckMenuItem.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataColorButton">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports three mappings in DataSource as handled in GetRequest() and SetRequest()
            - (Default) ::Gdk.Color Color
            - Alpha     ::ushort Alpha
            - UseAlpha  ::bool UseAlpha
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataColorButton.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataColorButton.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorButton.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.OnColorSet">
            <summary>
            Overrides OnColorSet to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorButton.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataColorSelection">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.#ctor">
            <summary>
            Creates DataCheckButton
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.#ctor(System.String)">
            <summary>
            Creates DataCheckButton
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataColorSelection.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataColorSelection.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataColorSelection.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.OnColorChanged">
            <summary>
            Overrides OnColorChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataColorSelection.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataComboBox">
            <summary>
            Provides adapted ComboBox
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="F:Gtk.DataBindings.DataComboBox.currentSelection">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBox.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBox.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBox.CellDescription">
            <summary>
            Gets activated on every cell to set user parameters on how to draw this cell.
            Difference between classic render column is that here arguments passed are not
            TreeIter and TreePath, but rather IList, already resolved object and Path to
            the same object.
            Visble should already be set as sane as possible, but this allows fine grained
            setting how to display data
            </summary>
            <remarks>
            There sholdn't be any need for dispatching additional data, if IMappedColumnItem
            type CellRenderers were used, they already provide more than enough by them self.
            </remarks>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.CursorPointsEveryType">
            <summary>
            Defines if CurrentSelection adaptor should point every type of object
            if false then pointing is limited to defualt type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.ItemsDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.ColumnMappings">
            <summary>
            Link to Column Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBox.CurrentSelection">
            <summary>
            Allows controls to bind on the selection in this TreeView
            </summary>
            <remarks>
            DO NOT USE THIS ONE TO SET WHICH ITEM IS SELECTED.
            OR AT LEAST NOT YET.
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.CallAdaptorGetData(System.Object)">
            <summary>
            Reacts on when selected object has being changed from the outside
            </summary>
            <param name="aSender">
            Notification sender object <see cref="T:System.Object" /></param>
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.OnChanged">
            <summary>
            Overrides OnCursorChanged to handle changes
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.GetCurrentObject">
            <summary>
            Function returns the same result as CurrentSelection, except
            CurrentSelection only returns default type or null
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.CreateAdaptors">
            <summary>
            Called when ItemsDataSource changes
            </summary>
            <summary>
            Creates adaptors associated with this IconView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.Disconnect">
            <summary>
            Disconnects everything inside this class
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBox.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataComboBoxEntry">
            <remarks>
            Model access has to be disabled in case of mapping is applied.
            set on model should return Exception
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="F:Gtk.DataBindings.DataComboBoxEntry.currentSelection">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBoxEntry.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBoxEntry.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataComboBoxEntry.CellDescription">
            <summary>
            Gets activated on every cell to set user parameters on how to draw this cell.
            Difference between classic render column is that here arguments passed are not
            TreeIter and TreePath, but rather IList, already resolved object and Path to
            the same object.
            Visble should already be set as sane as possible, but this allows fine grained
            setting how to display data
            </summary>
            <remarks>
            There sholdn't be any need for dispatching additional data, if IMappedColumnItem
            type CellRenderers were used, they already provide more than enough by them self.
            </remarks>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.CursorPointsEveryType">
            <summary>
            Defines if CurrentSelection adaptor should point every type of object
            if false then pointing is limited to defualt type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.ItemsDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.ColumnMappings">
            <summary>
            Link to Column Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataComboBoxEntry.CurrentSelection">
            <summary>
            Allows controls to bind on the selection in this TreeView
            </summary>
            <remarks>
            DO NOT USE THIS ONE TO SET WHICH ITEM IS SELECTED.
            OR AT LEAST NOT YET.
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.CallAdaptorGetData(System.Object)">
            <summary>
            Reacts on when selected object has being changed from the outside
            </summary>
            <param name="aSender">
            Notification sender object <see cref="T:System.Object" /></param>
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.OnChanged">
            <summary>
            Overrides OnCursorChanged to handle changes
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.GetCurrentObject">
            <summary>
            Function returns the same result as CurrentSelection, except
            CurrentSelection only returns default type or null
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.CreateAdaptors">
            <summary>
            Called when ItemsDataSource changes
            </summary>
            <summary>
            Creates adaptors associated with this IconView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.Disconnect">
            <summary>
            Disconnects everything inside this class
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataComboBoxEntry.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataDialog">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.#ctor">
            <summary>
            Creates Dialog
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.#ctor(System.Object)">
            <summary>
            Creates Dialog
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDialog.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
            <param name="aMapping">
            Mapping changed <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.StopAdaptorsOnDelete(System.Object,Gtk.DeleteEventArgs)">
            <summary>
            Notifies adaptors on closing this window
            </summary>
            <param name="o">
            Same as OnDelete <see cref="T:System.Object" /></param>
            <param name="a">
            Same as OnDelete <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataDialog.Finalize">
            <summary>
            Disconnects and destroys Dialog
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataDrawingArea">
            <summary>
            DataDrawingArea control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataDrawingArea.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataDrawingArea.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDrawingArea.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.OnValueChanged">
            <summary>
            Overrides OnValueChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDrawingArea.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataEntry">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataEntry.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataEntry.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEntry.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.OnChanged">
            <summary>
            Overrides OnChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.ToggleOverwrite">
            <summary>
            Exposes OnOverwrite method
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEntry.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataExpander">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.#ctor(System.IntPtr)">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aName">
            Label string for this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.#ctor(System.String,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aName">
            Label string for this container <see cref="T:System.String" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.#ctor(System.String,System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aName">
            Label string for this container <see cref="T:System.String" /></param>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataExpander.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataExpander.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataExpander.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataFileChooserButton">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports three mappings in DataSource as handled in GetRequest() and SetRequest()
            - (Default) ::Gdk.Color Color
            - Alpha     ::ushort Alpha
            - UseAlpha  ::bool UseAlpha
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.#ctor(Gtk.Widget)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDialog">
            Dialog associated with this widget <see cref="T:Gtk.Widget" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.#ctor(System.IntPtr)">
            <summary>
            Creates Widget
            </summary>
            <param name="aRaw">
            Raw pointer <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.#ctor(System.String,Gtk.FileChooserAction)">
            <summary>
            Creates Widget
            </summary>
            <param name="aTitle">
            Title string <see cref="T:System.String" /></param>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.#ctor(System.String,Gtk.FileChooserAction,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aTitle">
            Title string <see cref="T:System.String" /></param>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.#ctor(System.String,Gtk.FileChooserAction,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aTitle">
            Title string <see cref="T:System.String" /></param>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataFileChooserButton.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataFileChooserButton.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserButton.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.OnSelectionChanged">
            <summary>
            Overrides OnSelectionChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserButton.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataFileChooserWidget">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports three mappings in DataSource as handled in GetRequest() and SetRequest()
            - (Default) ::Gdk.Color Color
            - Alpha     ::ushort Alpha
            - UseAlpha  ::bool UseAlpha
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.#ctor(Gtk.FileChooserAction)">
            <summary>
            Creates Widget
            </summary>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.#ctor(System.IntPtr)">
            <summary>
            Creates Widget
            </summary>
            <param name="aRaw">
            Raw pointer <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.#ctor(Gtk.FileChooserAction,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.#ctor(Gtk.FileChooserAction,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aAction">
            FileChooser action <see cref="T:Gtk.FileChooserAction" /></param>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataFileChooserWidget.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataFileChooserWidget.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFileChooserWidget.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
            <param name="aMapping">
            Mapping changed <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.OnSelectionChanged">
            <summary>
            Overrides OnSelectionChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFileChooserWidget.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataFixed">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFixed.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataFixed.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataFrame">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataFrame.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataFrame.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataHBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataHBox.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataHButtonBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHButtonBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHButtonBox.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataHPaned">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHPaned.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHPaned.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataHRuler">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataHRuler.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHRuler.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHRuler.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataHScale">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.#ctor(System.Int32,System.Int32,System.Int32,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataHScale.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataHScale.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataHScale.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.OnValueChanged">
            <summary>
            Overrides OnValueChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataHScale.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataLabel">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataLabel.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLabel.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataLabel.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataProgressBar">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataProgressBar.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataProgressBar.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataProgressBar.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataRange">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataRange.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataRange.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRange.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.OnValueChanged">
            <summary>
            Overrides OnValueChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRange.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataRuler">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataRuler.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRuler.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRuler.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataSpinButton">
            <summary>
            SpinButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.#ctor(System.Int32,System.Int32,System.Int32,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataSpinButton.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataSpinButton.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataSpinButton.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.OnValueChanged">
            <summary>
            Overrides OnValueChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataSpinButton.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataTable">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.#ctor(System.IntPtr)">
            <summary>
            Creates Container
            </summary>
            <param name="aRaw">
            Gtk pointer <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.#ctor(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Creates Container
            </summary>
            <param name="aRows">
            Rows in table <see cref="T:System.UInt32" /></param>
            <param name="aColumns">
            Columns in table <see cref="T:System.UInt32" /></param>
            <param name="aHomogeneous">
            Cells are homogeneous <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.#ctor(System.UInt32,System.UInt32,System.Boolean,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aRows">
            Rows in table <see cref="T:System.UInt32" /></param>
            <param name="aColumns">
            Columns in table <see cref="T:System.UInt32" /></param>
            <param name="aHomogeneous">
            Cells are homogeneous <see cref="T:System.Boolean" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.#ctor(System.UInt32,System.UInt32,System.Boolean,System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aRows">
            Rows in table <see cref="T:System.UInt32" /></param>
            <param name="aColumns">
            Columns in table <see cref="T:System.UInt32" /></param>
            <param name="aHomogeneous">
            Cells are homogeneous <see cref="T:System.Boolean" /></param>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTable.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTable.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataToolbar">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataToolbar.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataToolbar.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataVBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataVBox.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataVButtonBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVButtonBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVButtonBox.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataVPaned">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVPaned.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVPaned.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataVRuler">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataVRuler.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVRuler.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVRuler.Finalize">
            <summary>
            Disconnects and destroys Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataVScale">
            <summary>
            ProgressBar control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.#ctor(System.Int32,System.Int32,System.Int32,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMin">
            Minimum value for scale <see cref="T:System.Int32" /></param>
            <param name="aMax">
            Maximum value for scale <see cref="T:System.Int32" /></param>
            <param name="aStep">
            Step value for scale <see cref="T:System.Int32" /></param>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataVScale.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataVScale.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataVScale.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.OnValueChanged">
            <summary>
            Overrides OnValueChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataVScale.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataWindow">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.#ctor(System.String)">
            <summary>
            Creates Window
            </summary>
            <param name="aTitle">
            Title of this window <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.#ctor(System.String,System.Object)">
            <summary>
            Creates Window
            </summary>
            <param name="aTitle">
            Title of this window <see cref="T:System.String" /></param>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataWindow.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.StopAdaptorsOnDelete(System.Object,Gtk.DeleteEventArgs)">
            <summary>
            Notifies adaptors on closing this window
            </summary>
            <param name="o">
            Same as OnDelete <see cref="T:System.Object" /></param>
            <param name="a">
            Same as OnDelete <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataWindow.Finalize">
            <summary>
            Disconnects and destroys Window
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DragObjectData">
            <summary>
            Drag object data description used in Adaptable controls like TreeView
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.DragObjectData.Current">
            <summary>
            Specifies Adaptor to current dragged item, after being linked to this
            adapor one can display current dragged item. And plugging anything
            is as easy as setting Object and calling Null() after drag is stopped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DragObjectData.ObjType">
            <value>
            Returns type of the dragged object
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DragObjectData.OwnerList">
            <value>
            Owner list of the dragged object
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DragObjectData.Path">
            <value>
            Path description
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DragObjectData.Object">
            <value>
            Object being dragged
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DragObjectData.Null">
            <summary>
            Clears data
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.NamedCellRendererList">
            <summary>
            Provides named CellRenderers, which can be accessed trough mapping property
            of the treeview
            </summary>
            <remarks>
            CellRenderers must be created prior to mapping, otherwise program will
            throw Exception
            </remarks>
        </member>
        <member name="T:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer">
            <summary>
            Simple class defining the NamedCellRenderer, providing access
            to its name and object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.#ctor(System.String,Gtk.CellRenderer,System.String)">
            <value>
            Creates cell renderer based on parameters
            </value>
            <param name="aName">
            Name of created cell renderer <see cref="T:System.String" /></param>
            <param name="aRenderer">
            Cell renderer used with this description <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aArg">
            Arguments passed with cell renderer <see cref="T:System.String" /></param>
        </member>
        <member name="F:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.Name">
            <value>
            Name of this CellRenderer
            </value>
        </member>
        <member name="F:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.Renderer">
            <value>
            CellRenderer used for this name
            </value>
        </member>
        <member name="F:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.Arg">
            <value>
            Arguments for this CellRenderer
            </value>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.Disconnect">
            <summary>
            Disconnects CellRenderer to help GC do his job
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer.Finalize">
            <value>
            Disconnects and destroys NamedCellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.NamedCellRendererList.Item(System.Int32)">
            <summary>
            Returns NamedCellRenderer at the given index
            </summary>
            <param name="aIdx">
            Index of cell renderer <see cref="T:System.Int32" /></param>
        </member>
        <member name="P:Gtk.DataBindings.NamedCellRendererList.Item(System.String)">
            <summary>
            Returns CellRenderer that was named as searched
            </summary>
            <param name="aName">
            Name of cell renderer <see cref="T:System.Int32" /></param>
        </member>
        <member name="P:Gtk.DataBindings.NamedCellRendererList.Count">
            <summary>
            Returns NamedCellRenderer Count in this list
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.Add(Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer)">
            <summary>
            Adds NamedCellRenderer to the list
            </summary>
            <param name="aRenderer">
            Cell renderer to be added into list <see cref="T:Gtk.DataBindings.NamedCellRendererList.NamedCellRenderer" /></param>
            <remarks>
            Throws Exception is Renderer with the same name already exists in this list
            or if NamedCellRenderer is invalid
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.Add(System.String,Gtk.CellRenderer,System.String)">
            <summary>
            Adds new NamedCellRenderer with aName and aRenderer as params to the list
            </summary>
            <param name="aName">
            Name of new cell renderer <see cref="T:System.String" /></param>
            <param name="aRenderer">
            Cell renderer to use with description <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aArg">
            Arguments used with this cell renderer <see cref="T:System.String" /></param>
            <remarks>
            Throws Exception is Renderer with the same name already exists in this list
            or if NamedCellRenderer is invalid
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.Remove(System.String)">
            <summary>
            Removes CellRenderer with given name from the list
            </summary>
            <param name="aName">
            Remove cell renderer with specified name <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.Clear">
            <summary>
            Clears and disconnects everything
            </summary>
            <remarks>
            Doesn't destroy original CellRenderers, this are still active just not named anymore
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.NamedCellRendererList.Finalize">
            <summary>
            Clears and destroys NamedCellRendererList
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataIconView">
            <summary>
            Provides adapted IconView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="F:Gtk.DataBindings.DataIconView.currentSelection">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataIconView.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataIconView.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataIconView.CellDescription">
            <summary>
            Gets activated on every cell to set user parameters on how to draw this cell.
            Difference between classic render column is that here arguments passed are not
            TreeIter and TreePath, but rather IList, already resolved object and Path to
            the same object.
            Visble should already be set as sane as possible, but this allows fine grained
            setting how to display data
            </summary>
            <remarks>
            There sholdn't be any need for dispatching additional data, if IMappedColumnItem
            type CellRenderers were used, they already provide more than enough by them self.
            </remarks>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.CursorPointsEveryType">
            <summary>
            Defines if CurrentSelection adaptor should point every type of object
            if false then pointing is limited to defualt type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.ItemsDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.ColumnMappings">
            <summary>
            Link to Column Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataIconView.CurrentSelection">
            <summary>
            Allows controls to bind on the selection in this TreeView
            </summary>
            <remarks>
            DO NOT USE THIS ONE TO SET WHICH ITEM IS SELECTED.
            OR AT LEAST NOT YET.
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.CallAdaptorGetData(System.Object)">
            <summary>
            Reacts on when selected object has being changed from the outside
            </summary>
            <param name="aSender">
            Notification sender object <see cref="T:System.Object" /></param>
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.GetActiveIter(Gtk.TreeIter@)">
            <summary>
            Simple compatibility issue with combobox and treeview
            </summary>
            <param name="iter">
            TreeIter where ActiveIter is returned <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            Returns true if successful <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.OnSelectionChanged">
            <summary>
            Overrides OnSelectionChanged to handle changes
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.GetCurrentObject">
            <summary>
            Function returns the same result as CurrentSelection, except
            CurrentSelection only returns default type or null
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.CreateAdaptors">
            <summary>
            Called when ItemsDataSource changes
            </summary>
            <summary>
            Creates adaptors associated with this IconView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.Disconnect">
            <summary>
            Disconnects everything inside this class
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataIconView.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataRadioButton">
            <summary>
            RadioButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.#ctor(System.String,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.#ctor(System.String,System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataRadioButton.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataRadioButton.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.InheritedBoundaryDataSource">
            <summary>
            Defines if BoundaryDataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.BoundaryDataSource">
            <summary>
            BoundaryDataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.BoundaryMappings">
            <summary>
            Link to BoundaryMappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioButton.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.OnToggled">
            <summary>
            Overrides OnToggled to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioButton.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataImage">
            <summary>
            Image control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataImage.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataImage.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.InheritedBoundaryDataSource">
            <summary>
            Defines if BoundaryDataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.BoundaryDataSource">
            <summary>
            BoundaryDataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.BoundaryMappings">
            <summary>
            Link to BoundaryMappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataImage.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataImage.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkAdaptor">
            <summary>
            Overrides System.Data.Bindings.Adaptor to make it Gtk compatible
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptor.#ctor">
            <summary>
            Creates GtkAdaptor
            </summary>
            <remarks>
            Used to create pointer like Adaptor objects
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptor.#ctor(System.Boolean,System.Data.Bindings.ControlAdaptor,System.Object,System.Boolean)">
            <summary>
            Creates GtkAdaptor
            </summary>
            <param name="aIsBoundary">
            Set true if creating Boundary adaptor <see cref="T:System.Boolean" /></param>
            <param name="aControlAdaptor">
            ControlAdaptor which will be controling this one <see cref="T:System.Data.Bindings.ControlAdaptor" /></param>
            <param name="aControl">
            Control which will bind this Adaptor <see cref="T:System.Object" /></param>
            <param name="aSingleMappingOnly">
            Set true if Control allows single mapping <see cref="T:System.Boolean" /></param>
        </member>
        <member name="P:Gtk.DataBindings.GtkAdaptor.GtkWidget">
            <value>
            Returns Gtk.Widget typecast of Adapter.Control
            </value>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptor.RepostRenewToAllChildren(System.Object,System.Data.Bindings.EActionType)">
            <summary>
            Reposts renewal to all children controls
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptor.AdapteeDataChanged(System.Object)">
            <summary>
            Notifies all connected parties and then  proceeds to global dispatch
            loop which sends this same message to all Adaptors who have
            InheritedDataSource = true and are part of this Adaptors container.
            Example: WindowAdaptor having set DataSource is automatically dispatching
            the same messages about changes to its child controls that have not set
            their own DataSource and have InheritedDataSource = true
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptor.ExecuteUserMethod(System.Data.Bindings.AnonymousDelegateEvent)">
            <summary>
            Executes anonymous delegate event in specialized terms. For example
            all data transfers in Gtk.DataBindings have to be executed trough
            Gtk.Invoke
            </summary>
            <param name="aEvent">
            Event to be executed <see cref="T:System.Data.Bindings.AnonymousDelegateEvent" /></param>
        </member>
        <member name="T:Gtk.DataBindings.GtkControlAdaptor">
            <summary>
            Provides DataBindings ControlAdaptor functionality according to Gtk
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor">
            <summary>
            Creates GtkControlAdaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates GtkControlAdaptor
            </summary>
            <param name="aControl">
            Control where this Adaptor is connected to <see cref="T:System.Object" /></param>
            <param name="aSingleMapping">
            Adaptor allows single mapping <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor(System.Object,System.Boolean,System.String)">
            <summary>
            Creates GtkControlAdaptor
            </summary>
            <param name="aControl">
            Control where this Adaptor is connected to <see cref="T:System.Object" /></param>
            <param name="aSingleMapping">
            Adaptor allows single mapping <see cref="T:System.Boolean" /></param>
            <param name="aMappings">
            Mappings string <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor(System.Object,System.Boolean,System.Object,System.String)">
            <summary>
            Creates GtkControlAdaptor
            </summary>
            <param name="aControl">
            Control where this Adaptor is connected to <see cref="T:System.Object" /></param>
            <param name="aSingleMapping">
            Adaptor allows single mapping <see cref="T:System.Boolean" /></param>
            <param name="aDataSource">
            DataSource connected to this Adaptor <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings string <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor(System.Object,System.Data.Bindings.IAdaptor,System.Data.Bindings.IAdaptor)">
            <summary>
            Creates GtkControlAdaptor
            </summary>
            <param name="aControl">
            Control where this Adaptor is connected to <see cref="T:System.Object" /></param>
            <param name="aAdaptor">
            Custom created Adaptor to be connected with this one <see cref="T:System.Data.Bindings.IAdaptor" /></param>
            <param name="aBoundaryAdaptor">
            Custom created BoundaryAdaptor to be connected with this one <see cref="T:System.Data.Bindings.IAdaptor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.#ctor(System.Object,System.Data.Bindings.IAdaptor,System.Data.Bindings.IAdaptor,System.Object,System.String)">
            <summary>
            Creates GtkControlAdaptor
            </summary>
            <param name="aControl">
            Control where this Adaptor is connected to <see cref="T:System.Object" /></param>
            <param name="aAdaptor">
            Custom created Adaptor to be connected with this one <see cref="T:System.Data.Bindings.IAdaptor" /></param>
            <param name="aBoundaryAdaptor">
            Custom created BoundaryAdaptor to be connected with this one <see cref="T:System.Data.Bindings.IAdaptor" /></param>
            <param name="aDataSource">
            DataSource connected to this Adaptor <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings string <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.ValidateControlType(System.Object)">
            <summary>
            Validates type of the control if it is compatible with adaptor
            </summary>
            <param name="aControl">
            Control to validate type for <see cref="T:System.Object" /></param>
            <returns>
            true if control is right type, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.ControlIsWindow(System.Object)">
            <summary>
            Checks if control is Window type
            </summary>
            <param name="aControl">
            Control to check for <see cref="T:System.Object" /></param>
            <returns>
            true if control is window, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.GetParentOfControl(System.Object)">
            <summary>
            Resolves parent control
            </summary>
            <param name="aControl">
            Control whos parent should be resolved <see cref="T:System.Object" /></param>
            <returns>
            Parent control, null if parent does not exists <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.GetLowestParentOfControl(System.Object)">
            <summary>
            Resolves parent control
            </summary>
            <param name="aControl">
            Control whos parent should be resolved <see cref="T:System.Object" /></param>
            <returns>
            Parent control, null if parent does not exists <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.ParentWindow(System.Object)">
            <summary>
            Returns ParentWindow for the specified control
            </summary>
            <param name="aControl">
            Control whose parent we need <see cref="T:System.Object" /></param>
            <returns>
            reference to parent window <see cref="T:System.Object" /></returns>
            <remarks>
            Returns widget even if it is not Window. If specified use demands
            Window type first thing needed after this is validation with
            ControlIsWindow <see cref="!:GtkAdaptor.ControlIsWindow" /></remarks>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.ControlIsContainer(System.Object)">
            <summary>
            Checks if control is Box type. This method
            needs to be overriden in ControlAdaptor subclasses
            </summary>
            <param name="aControl">
            Control to check for <see cref="T:System.Object" /></param>
            <returns>
            true if control is window, false if not <see cref="T:System.Boolean" /></returns>
            <remarks>
            Throws exception
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.SetControlSensitivity(System.Object,System.Boolean)">
            <summary>
            Sets control sensitivity on or off
            </summary>
            <param name="aControl">
            Control to set sensitivity for <see cref="T:System.Object" /></param>
            <param name="aSensitive">
            New sensitivity value <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.InvokeControlAdapteeDataChange(System.Data.Bindings.IChangeableControl,System.Object)">
            <summary>
            Calls controls AdapteeDataChange, in case of gtk this handles being called
            in the right thread
            </summary>
            <param name="aControl">
            Control to call AdapteeDataChanged <see cref="T:System.Data.Bindings.IChangeableControl" /></param>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
            <remarks>
            By overriding this method one can handle things differently. Specific
            example of this is GTK+ which needs to call control changes in its master thread
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.InvokeControlBoundaryDataChange(System.Data.Bindings.IBoundedContainer,System.Object)">
            <summary>
            Valid for complex controls like TreeView
            </summary>
            <summary>
            Calls controls GetBoundaryValuesFromDataSource, in case of gtk this handles being called
            in the right thread
            </summary>
            <param name="aControl">
            Control to call GetDataFromDataSource <see cref="T:System.Data.Bindings.IBoundedContainer" /></param>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
            <remarks>
            By overriding this method one can handle things differently. Specific
            example of this is GTK+ which needs to call control changes in its master thread
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.ConnectControlEvents">
            <summary>
            Connects base control events like gaining or loosing focus etc.
            ControlAdaptor subclasses should override this method to connect
            to specific widget set events
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.DisconnectControlEvents">
            <summary>
            Disconnects base control events like gaining or loosing focus etc.
            ControlAdaptor subclasses should override this method to connect
            to specific widget set events
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.CreateAdaptorInstance(System.Boolean,System.Object,System.Boolean)">
            <summary>
            Creates new Adaptor instance. Use this to overclass Adaptor with derived type
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.OnLeaveNotifyEvent(System.Object,Gtk.LeaveNotifyEventArgs)">
            <summary>
            Overrides OnLeaveEvent
            </summary>
            <param name="args">
            Normal OnLeaveNotify object parameter <see cref="T:System.Object" /></param>
            <param name="args">
            Normal OnLeaveNotify parameters <see cref="T:Gdk.EventCrossing" /></param>
            <returns>
            Same as OnLeaveNotify <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkControlAdaptor.DebugAdaptor">
            <summary>
            Writes debug information about this adaptor
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ModeButtonEventArgs">
            <summary>
            ModeButton event arguments
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ModeButtonEventArgs.Widget">
            <value>
            Widget concerned in event
            </value>
        </member>
        <member name="P:Gtk.DataBindings.ModeButtonEventArgs.Index">
            <value>
            Widget index
            </value>
        </member>
        <member name="T:Gtk.DataBindings.EnumItemState">
            <summary>
            Specifies item state
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemState.Normal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemState.Selected">
            <summary>
            Selected
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemState.Preflight">
            <summary>
            Mouse over
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.EnumItemDisplayMode">
            <summary>
            Specifies how Enum item should display it self
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemDisplayMode.IconsOnly">
            <summary>
            Icons only
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemDisplayMode.TextOnly">
            <summary>
            Text only
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemDisplayMode.TextAndIcon">
            <summary>
            Text and icon
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.EnumItemLayout">
            <summary>
            Specifies layout for Enum item HComboCell widget
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemLayout.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.EnumItemLayout.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DateChangedEventArgs">
            <summary>
            Arguments passed on date changed event
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DateChangedEventArgs.Date">
            <value>
            Date
            </value>
        </member>
        <member name="T:Gtk.DataBindings.ActionMonitorType">
            <summary>
            Defines type of action which is monitored
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorType.Visibility">
            <summary>
            Monitores visibility
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorType.Sensitivity">
            <summary>
            Monitores sensitivity
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorType.InvertedVisibility">
            <summary>
            Monitores visibility with inverted value
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorType.InvertedSensitivity">
            <summary>
            Monitores sensitivity with inverted value
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ActionMonitorDefaultsType">
            <summary>
            Defines ActionMonitor defaults
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorDefaultsType.NotNullTarget">
            <summary>
            true when DataSource Target is not null
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorDefaultsType.NeedsValid">
            <summary>
            Will be possible to be true only if DataSource is valid (is null)
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ActionMonitorDefaultsType.Always">
            <summary>
            Will be possible to be true even if DataSource is not valid (is null)
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ActionMonitor">
            <summary>
            Declares description of action monitor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionMonitor.#ctor(Gtk.DataBindings.ActionMonitorType,Gtk.Action,Gtk.DataBindings.ActionMonitorDefaults)">
            <summary>
            Creates ActionMonitor
            </summary>
            <param name="aType">
            Type of monitoring <see cref="T:Gtk.DataBindings.ActionMonitorType" /></param>
            <param name="aAction">
            Action which is monitored <see cref="T:Gtk.Action" /></param>
            <param name="aDefaults">
            Defaults how to resolve when DataSource is null <see cref="T:Gtk.DataBindings.ActionMonitorDefaults" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionMonitor.#ctor(Gtk.DataBindings.ActionMonitorType,Gtk.Action)">
            <summary>
            Creates ActionMonitor
            </summary>
            <param name="aType">
            Type of monitoring <see cref="T:Gtk.DataBindings.ActionMonitorType" /></param>
            <param name="aAction">
            Action which is monitored <see cref="T:Gtk.Action" /></param>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitor.MonitorType">
            <summary>
            Declares Action monitor type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitor.Action">
            <summary>
            Returns action which is monitored
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitor.IsValid">
            <summary>
            Returns if ActionMonitor is valid
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitor.Defaults">
            <summary>
            Defaults for handling when DataSource is null
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ActionMonitorDefaults">
            <summary>
            Controls default value when DataSource can't be accessed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionMonitorDefaults.#ctor(Gtk.DataBindings.ActionMonitorDefaultsType)">
            <summary>
            Creates ActionMonitorDefaults
            </summary>
            <param name="aMode">
            Mode for default setting <see cref="T:Gtk.DataBindings.ActionMonitorDefaultsType" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionMonitorDefaults.#ctor(Gtk.DataBindings.ActionMonitorDefaultsType,System.Boolean)">
            <summary>
            Creates ActionMonitorDefaults
            </summary>
            <param name="aMode">
            Mode for default setting <see cref="T:Gtk.DataBindings.ActionMonitorDefaultsType" /></param>
            <param name="aDefaultValue">
            Value which needs to be set if DataSource is null and mode is NeedsValid <see cref="T:System.Boolean" /></param>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitorDefaults.Mode">
            <summary>
            Default mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionMonitorDefaults.DefaultValue">
            <summary>
            Value which will only be set if Mode is NeedsValid
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ToolbarConstriction">
            <summary>
            Defines how toolbars should behave
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ToolbarConstriction.SystemDefaults">
            <summary>
            When set with this, toolbars will respect system toolbar settings
            </summary>
        </member>
        <member name="F:Gtk.DataBindings.ToolbarConstriction.ApplicationDefaults">
            <summary>
            When set with this, toolbars will be able to change according to its own settings
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.Notificator">
            <summary>
            Adds simple redirection to avoid need for assembly to
            reference to System.Data.Bindings
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.Notificator.ObjectChangedNotification(System.Object)">
            <summary>
            Executes notification ObjectChanged in Triggers engine
            </summary>
            <param name="aObject">
            DataSource Object which was subject to event <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.Notificator.ReloadObjectNotification(System.Object)">
            <summary>
            Executes notification ReloadObject in Triggers engine
            </summary>
            <param name="aObject">
            DataSource Object which was subject to event <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.Notificator.Disconnect(Gtk.Widget)">
            <summary>
            Disconnects everything inside specified widget
            </summary>
            <param name="aWidget">
            Widget to be disconnected <see cref="T:Gtk.Widget" /></param>
        </member>
        <member name="T:Gtk.DataBindings.ActionController">
            <summary>
            Action controller which controlls multiple actions
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.#ctor">
            <summary>
            Throws exception for its invalid creation
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.#ctor(Gtk.DataBindings.ActionMonitor[])">
            <summary>
            Creates ActionController
            </summary>
            <param name="aActions">
            List of actions to control <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.#ctor(System.String,Gtk.DataBindings.ActionMonitor[])">
            <summary>
            Creates ActionController and maps Visibility and sensitivity
            </summary>
            <param name="aSensitivityMapping">
            Property mapped to Sensitivity <see cref="T:System.String" /></param>
            <param name="aActions">
            List of actions to control <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.#ctor(System.Object,System.String,System.String,Gtk.DataBindings.ActionMonitor[])">
            <summary>
            Creates ActionController and maps Visibility and sensitivity
            </summary>
            <param name="aVisibilityMapping">
            Property mapped to Visibility <see cref="T:System.String" /></param>
            <param name="aSensitivityMapping">
            Property mapped to Sensitivity <see cref="T:System.String" /></param>
            <param name="aActions">
            List of actions to control <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.Adaptor">
            <summary>
            Adaptor connected to this object
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.Sensitive">
            <summary>
            Makes controlled actions either sensitive or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.Visible">
            <summary>
            Makes controlled actions either visible or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.IsValid">
            <summary>
            Returns if datasource is valid or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.SensitiveMapping">
            <summary>
            Connects mapping to the Sensitive property
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ActionController.VisibleMapping">
            <summary>
            Connects mapping to the Sensitive property
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.CalcSensitive(Gtk.DataBindings.ActionMonitor,System.Boolean)">
            <summary>
            Calculates Sensitive for specific ActionMonitor
            </summary>
            <param name="aMonitor">
            Action monitor being calculated Sensitive for <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
            <param name="aValue">
            New value to be assigned <see cref="T:System.Boolean" /></param>
            <returns>
            true if sensitive, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.CalcVisible(Gtk.DataBindings.ActionMonitor,System.Boolean)">
            <summary>
            Calculates Visible for specific ActionMonitor
            </summary>
            <param name="aMonitor">
            Action monitor being calculated Visible for <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
            <param name="aValue">
            New value to be assigned <see cref="T:System.Boolean" /></param>
            <returns>
            true if visible, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.GetMapping">
            <summary>
            Calculates mappings for this object
            </summary>
            <returns>
            Mapping string <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.TargetChanged(System.Data.Bindings.IAdaptor)">
            <summary>
            Renews data on target change
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Add(Gtk.DataBindings.ActionMonitor)">
            <summary>
            Adds action to the list of monitored actions
            </summary>
            <param name="aAction">
            Action to add <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Remove(Gtk.DataBindings.ActionMonitor)">
            <summary>
            Removes action from the list of monitored actions
            </summary>
            <param name="aAction">
            Action to remove <see cref="T:Gtk.DataBindings.ActionMonitor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Remove(Gtk.Action)">
            <summary>
            Removes action from the list of monitored actions
            </summary>
            <param name="aAction">
            Action to remove <see cref="T:Gtk.Action" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Clear">
            <summary>
            Clears the mapping list
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Disconnect">
            <summary>
            Disconnects ActionController
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ActionController.Finalize">
            <summary>
            Disconnects adaptor and destroy its self
            </summary>
        </member>
        <member name="T:System.Data.Bindings.GtkListAdaptor">
            <summary>
            Adaptor which takes care of list
            </summary>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.#ctor">
            <summary>
            Creates ListAdaptor
            </summary>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.#ctor(System.Boolean,System.Data.Bindings.ControlAdaptor,System.Object,System.Boolean)">
            <summary>
            Creates GtkListAdaptor
            </summary>
            <param name="aIsBoundary">
            Defines if this is boundary adapter <see cref="T:System.Boolean" /></param>
            <param name="aControlAdaptor">
            ControlAdapter to which this one is connected <see cref="T:System.Data.Bindings.ControlAdaptor" /></param>
            <param name="aControl">
            Control connected to this adaptor <see cref="T:System.Object" /></param>
            <param name="aSingleMappingOnly">
            Adaptor supports single mapping only <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.ListChildChanged(System.Object,System.Data.Bindings.EListAction,System.Int32[])">
            <summary>
            Bogus and not needed, it is only needed to fullfill the IObserveableList
            </summary>
            <param name="aObject">
            Object changed <see cref="T:System.Object" /></param>
            <param name="aAction">
            Action <see cref="T:System.Data.Bindings.EListAction" /></param>
            <param name="aPath">
            Path to changed object <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.OnListChanged(System.Object)">
            <summary>
            Handles message on the event of list change
            </summary>
            <param name="aList">
            List that changed <see cref="T:System.Collections.IList" /></param>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.OnElementAdded(System.Object,System.Int32[])">
            <summary>
            Handles message on the event of adding element
            </summary>
            <param name="aList">
            List that had added element <see cref="T:System.Collections.IList" /></param>
            <param name="aIdx">
            Path to added element <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.OnElementChanged(System.Object,System.Int32[])">
            <summary>
            Handles message on the event of changing element
            </summary>
            <param name="aList">
            List that had changed element <see cref="T:System.Collections.IList" /></param>
            <param name="aIdx">
            Path to changed element <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:System.Data.Bindings.GtkListAdaptor.OnElementRemoved(System.Object,System.Int32[],System.Object)">
            <summary>
            Handles message on the event of removing element
            </summary>
            <param name="aList">
            List that had removed element <see cref="T:System.Collections.IList" /></param>
            <param name="aIdx">
            Path to removed element <see cref="T:System.Int32" /></param>
            <param name="aObject">
            Deleted element <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.ToolbarControllerSettings">
            <summary>
            Class used as DataSource for DataToolbar class
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ToolbarControllerSettings.Constriction">
            <summary>
            Defines how toolbars should behave
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ToolbarControllerSettings.Style">
            <summary>
            Defines style toolbars should use
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ToolbarController">
            <summary>
            Class that controls how toolbars (DataToolbar) behave
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ToolbarController.Constriction">
            <summary>
            Defines how toolbars should behave
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ToolbarController.Style">
            <summary>
            Defines style toolbars should use
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.ToolbarController.Settings">
            <summary>
            Provides object DataSource for toolbars to connect to
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkAdaptorSelector">
            <summary>
            Determines if class type is valid for GtkAdaptor to be allocated
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptorSelector.CheckType(System.Object)">
            <summary>
            Checks class if its type is correct for this selector
            </summary>
            <param name="aObject">
            Object to be checked <see cref="T:System.Object" /></param>
            <returns>
            AdaptorSelector instance or null if type is not correct <see cref="T:System.Data.Bindings.IAdaptorSelector" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptorSelector.CreateAdaptor">
            <summary>
            Creates adaptor for that type
            </summary>
            <returns>
            Adaptor <see cref="T:System.Data.Bindings.IAdaptor" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkAdaptorSelector.GetAdaptorType">
            <summary>
            Returns type of adaptor to be checked against if already
            allocated is of correct type
            </summary>
            <returns>
            Adaptor type <see cref="T:System.Type" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.FlashingWidgets">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.WidgetFlasher">
            <summary>
            Starts flashing control based on the specified params
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.WidgetFlasher.flashType">
            <value>
            Returns defined flash type
            </value>
            <remarks>
            Default value is FlashingType.SingleStep
            </remarks>
        </member>
        <member name="F:Gtk.ExtraWidgets.WidgetFlasher.flashCount">
            <summary>
            Returns the number of flashes to be performed
            </summary>
            <remarks>
            Default value is 1
            </remarks>
        </member>
        <member name="F:Gtk.ExtraWidgets.WidgetFlasher.flashDuration">
            <summary>
            Returns time of single flash
            </summary>
            <remarks>
            Default value is 1 second
            </remarks>
        </member>
        <member name="F:Gtk.ExtraWidgets.WidgetFlasher.stepDuration">
            <summary>
            Returns time of single flash
            </summary>
            <remarks>
            Default value is 50/1000 second
            </remarks>
        </member>
        <member name="F:Gtk.ExtraWidgets.WidgetFlasher.flashedWidget">
            <summary>
            Specifies widget which is supposed to be flashing
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.WidgetFlasher.IsActive">
            <summary>
            Returns if flashing of this control was cancelled
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.WidgetFlasher.TotalFlashingTime">
            <summary>
            Returns total time of flashing
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.WidgetFlasher.Cancel">
            <summary>
            Cancels flashing of the widget
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.WidgetFlasher.ResetColorToNormal">
            <summary>
            Resets widgets color back to its original state
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.WidgetFlasher.FlashColor">
            <summary>
            Changes color to new state
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.WidgetFlasher.Start">
            <summary>
            Start flashing of the widget
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.BasicUtilities">
            <summary>
            Methods needed to perform basic tasks
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.BasicUtilities.CairoConvertToPixbuf(Cairo.ImageSurface)">
            		 * cairo_convert_to_pixbuf:
            		 * Converts from a Cairo image surface to a GdkPixbuf. Why does GTK+ not
            		 * implement this?</member>
        <!--FIXME: Invalid documentation markup was found for member M:Gtk.ExtraWidgets.BasicUtilities.ColorShiftPixbuf(Gdk.Pixbuf,System.Byte)-->
        <member name="M:Gtk.ExtraWidgets.BasicUtilities.CreateAlphaPixbuf(Gdk.Pixbuf,System.Byte)">
            <summary>
            Creates version of Pixbuf with specified alpha
            </summary>
            <param name="src">
            Original pixbuf <see cref="T:Gdk.Pixbuf" /></param>
            <param name="maxalpha">
            Max value of alpha, 255 becomes maxalpha, other are scaled <see cref="T:System.Byte" /></param>
            <returns>
            Alpha bleeded pixbuf <see cref="T:Gdk.Pixbuf" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.ColorClickedEventArgs">
            <summary>
            Event arguments passed on color clicked event
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.ColorClickedEventArgs.Color">
            <value>
            Color
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.LinkClickedEventArgs">
            <summary>
            Event arguments passed on link clicked event
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkClickedEventArgs.Text">
            <value>
            Text
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkClickedEventArgs.LinkUri">
            <value>
            Uri
            </value>
        </member>
        <member name="E:Gtk.ExtraWidgets.CalendarDayDescription.DayDescriptionRequest">
            <summary>
            Handles requests for descriptions
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.CellArguments">
            <summary>
            Cell action arguments which can be resolved in methods which don't really support
            passing of them
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellArguments.ActionType">
            <value>
            Type of action in progress
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellArguments.PassedArguments">
            <value>
            Arguments passed
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellArguments.Start(Gtk.ExtraWidgets.CellAction,Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Starts action by setting parameters
            </summary>
            <param name="aActionType">
            Action type <see cref="T:Gtk.ExtraWidgets.CellAction" /></param>
            <param name="aArguments">
            Arguments <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellArguments.Stop">
            <summary>
            Stops action
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.CellExposeEventArgs">
            <summary>
            Specifies cell redraw arguments
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.ExposeEvent">
            <value>
            Original expose event arguments
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.OfficialDraw">
            <value>
            Returns true if drawing is part of official expose event
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.Context">
            <value>
            Cairo context
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.Drawable">
            <value>
            Gdk.Drawable context
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.ClippingArea">
            <value>
            Clipping area
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellExposeEventArgs.CellArea">
            <value>
            Cell area
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.TimeChangedEventArgs">
            <summary>
            Event arguments passed on time change
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeChangedEventArgs.Time">
            <value>
            New time
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.ActivationEventArgs">
            <summary>
            Arguments passed on activation
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.ActivationEventArgs.ActivatedObject">
            <value>
            Activated object
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.IActivatable">
            <summary>
            Interface describing activatable objects
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.IActivatable.Activated">
            <summary>
            Event sent on object activation
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.IActivatable.Activate">
            <summary>
            Executes activation
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.IGtkState">
            <summary>
            Specifies classes which are able to do prelight
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.IGtkState.State">
            <value>
            Prelight active or not
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.ValueResolveMethod">
            <summary>
            Determines how state is resolved
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ValueResolveMethod.FromOwner">
            <summary>
            Resolved from owner
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ValueResolveMethod.Manual">
            <summary>
            Manual state
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.SideCut">
            <summary>
            Specifies which side should be cutted from painting cell
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.None">
            <summary>
            None, all borders are visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.Left">
            <summary>
            Only left border is not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.Right">
            <summary>
            Only right border is not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.Top">
            <summary>
            Only top border is not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.Bottom">
            <summary>
            Only bottom border is not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.LeftBottom">
            <summary>
            Left and bottom borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.LeftTop">
            <summary>
            Left and top borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.LeftRight">
            <summary>
            Left and right borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.RightBottom">
            <summary>
            Right and bottom borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.RightTop">
            <summary>
            Right and top borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.TopBottom">
            <summary>
            Left and top borders are not visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.ShowLeftOnly">
            <summary>
            Only left border is visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.ShowTopOnly">
            <summary>
            Only top border is visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.ShowRightOnly">
            <summary>
            Only right border is visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.ShowBottomOnly">
            <summary>
            Only bottom border is visible
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.SideCut.All">
            <summary>
            No borders are visible
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.IDrawingCell">
            <summary>
            Specifies drawing cell
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Visible">
            <value>
            Specifies if cell is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.IsVisible">
            <value>
            Checks if cell is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Padding">
            <value>
            Specifies border width for cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Master">
            <value>
            Returns top most owner of the cells who isn't IDrawingCell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.MasterIsFocused">
            <value>
            Returns true if master is focused
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Owner">
            <value>
            Cell owner
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Area">
            <value>
            Value is calculated on redraw
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.IDrawingCell.Expanded">
            <value>
            Speceifies if cell is expanded or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.IDrawingCell.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aContext">
            Context <see cref="T:Cairo.Context" /></param>
            <param name="aClippingArea">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
            <param name="aArea">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.IDrawingCell.GetSize(System.Double@,System.Double@)">
            <summary>
            Resolves size needed for cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Int32" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Int32" /></param>
            <remarks>
            This method is internal and should not be called directly
            </remarks>
        </member>
        <member name="M:Gtk.ExtraWidgets.IDrawingCell.GetCellSize(System.Double@,System.Double@)">
            <summary>
            Resolves size needed for cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Int32" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.IDrawingCell.CellAtCoordinates(System.Double,System.Double)">
            <summary>
            Returns cell which takes place on specified coordinates
            </summary>
            <param name="aX">
            X <see cref="T:System.Double" /></param>
            <param name="aY">
            Y <see cref="T:System.Double" /></param>
            <returns>
            Cell or null <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></returns>
            <remarks>
            This method is usefull for mouse resolving
            </remarks>
        </member>
        <member name="T:Gtk.ExtraWidgets.HorizontalComboEventArgs">
            <summary>
            Event arguments for horizontal combo box
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.HorizontalComboEventArgs.Index">
            <value>
            Cell index
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HorizontalComboEventArgs.Control">
            <value>
            Widget containing cell
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.CellChangedType">
            <summary>
            Type of cell change
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.CellChangedType.Display">
            <summary>
            Display
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.CellChangedType.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.CellChangedType.All">
            <summary>
            Display and state
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.EnumCellChangedEventArgs">
            <summary>
            Event arguments passed on cell change
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.EnumCellChangedEventArgs.Cell">
            <value>
            Cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.EnumCellChangedEventArgs.ChangeType">
            <value>
            Change type
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.ChameleonStyle">
            <summary>
            Types of chameleon event box
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ChameleonStyle.ClassicEventBox">
            <summary>
            Classic event box
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ChameleonStyle.Button">
            <summary>
            Button style
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ChameleonStyle.Entry">
            <summary>
            Entry style
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.DateEventArgs">
            <summary>
            EventArgs specifiying date as parameter
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DateEventArgs.Date">
            <value>
            Date value
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.GdkKeyEventArgs">
            <summary>
            EventArgs specifiying key as parameter
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.GdkKeyEventArgs.Key">
            <value>
            Key value
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.KeyInfoList">
            <summary>
            Class containing list of special keys
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.KeyInfoList.Clear">
            <summary>
            Clears list of keys
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.KeyInfoList.Contains(Gdk.Key)">
            <summary>
            Checks if key is specified in list
            </summary>
            <param name="aKey">
            Key <see cref="T:Gdk.Key" /></param>
            <returns>
            true if key is in list, false if not
            </returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.KeyInfoList.Add(Gdk.Key)">
            <summary>
            Adds key to list
            </summary>
            <param name="aKey">
            Key <see cref="T:Gdk.Key" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.KeyInfoList.Remove(Gdk.Key)">
            <summary>
            Removes key from list
            </summary>
            <param name="aKey">
            Key <see cref="T:Gdk.Key" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.FlashingType">
            <summary>
            Used to declare how widget should flash
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.CustomColorDescription.enabled">
            <summary>
            Returns if extra coloring was enabled
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.CustomColorDescription.widgetColor">
            <summary>
            Defines color
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.CustomColorDescription.onColorChange">
            <summary>
            Called whenever new color has been set up
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.CustomColorDescription.Set(Gdk.Color)">
            <summary>
            Enables the color activity, sets WidgetColor and executes OnColorChange
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.CustomColorDescription.Reset">
            <summary>
            Disables the color activity and executes OnColorChange
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.PrelightAwareImage">
            <summary>
            Serves as Image container, difference is that Image is highlighted
            on mouse over and emmits OnClicked event when clicked
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.PrelightAwareImage.PropertyChanged">
            <summary>
            PropertyChanged delegate as specified in INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.PrelightAwareImage.OnPropertyChanged(System.String)">
            <summary>
            Method calls PropertyChanged if it is not null, but it allows external
            objects to access this one for convinience
            </summary>
            <param name="aPropertyName">
            Name of the property which changed <see cref="T:System.String" /></param>
        </member>
        <member name="T:Gtk.DataBindings.DataTextView">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataTextView.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataTextView.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTextView.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTextView.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTextView.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTextView.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Gtk.DataBindings.DataTextView.InheritedBoundaryDataSource-->
        <member name="P:Gtk.DataBindings.DataTextView.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTextView.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.OnChanged(System.Object,System.EventArgs)">
            <summary>
            Overrides OnChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTextView.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataTreeView">
            <remarks>
            Model access has to be disabled in case of mapping is applied.
            set on model should return Exception
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="F:Gtk.DataBindings.DataTreeView.currentSelection">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataTreeView.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataTreeView.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataTreeView.IsVisibleInFilter">
            <summary>
            Filtering event
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataTreeView.CellDescription">
            <summary>
            Gets activated on every cell to set user parameters on how to draw this cell.
            Difference between classic render column is that here arguments passed are not
            TreeIter and TreePath, but rather IList, already resolved object and Path to
            the same object.
            Visble should already be set as sane as possible, but this allows fine grained
            setting how to display data
            </summary>
            <remarks>
            There sholdn't be any need for dispatching additional data, if IMappedColumnItem
            type CellRenderers were used, they already provide more than enough by them self.
            </remarks>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.CursorPointsEveryType">
            <summary>
            Defines if CurrentSelection adaptor should point every type of object
            if false then pointing is limited to defualt type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.ItemsDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.ColumnMappings">
            <summary>
            Link to Column Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTreeView.CurrentSelection">
            <summary>
            Allows controls to bind on the selection in this TreeView
            </summary>
            <remarks>
            DO NOT USE THIS ONE TO SET WHICH ITEM IS SELECTED.
            OR AT LEAST NOT YET.
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.GetSelectedObjects">
            <summary>
            Returns currently selected objects
            </summary>
            <returns>
            List of selected objects <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.CallAdaptorGetData(System.Object)">
            <summary>
            Reacts on when selected object has being changed from the outside
            </summary>
            <param name="aSender">
            Notification sender object <see cref="T:System.Object" /></param>
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.OnCursorChanged">
            <summary>
            Overrides OnCursorChanged to handle changes
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.GetCurrentObject">
            <summary>
            Function returns the same result as CurrentSelection, except
            CurrentSelection only returns default type or null
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.CreateAdaptors">
            <summary>
            Called when ItemsDataSource changes
            </summary>
            <summary>
            Creates adaptors associated with this IconView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.Disconnect">
            <summary>
            Disconnects everything inside this class
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTreeView.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.IListTreeModel">
            <summary>
            Defines query implementor specific to handle DataTable
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.IListTreeModel.Items">
            <summary>
            Reference to IList
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.MappingsImplementor.IsVisibleInFilter">
            <summary>
            Filtering event
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappingsImplementor.ColumnAdaptor">
            <summary>
            Resolves adaptor and it simplifies the simple string
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappingsImplementor.ItemsDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappingsImplementor.ListItems">
            <summary>
            Provides access to IList with items for this control
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappingsImplementor.NamedCellRenderers">
            <summary>
            Provides a list of CellRenderers which can be accessed by name
            Usage of these should go trough specifying mappings of this TreeView
            where
            Property[Column Name]&lt;&gt;CellRendererName
            is the rule of how and when to use them
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RenderColumnFuncWithData(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.TreeModel,Gtk.TreeIter)">
            <summary>
            Used to transfer data where multicolumn is happening
            </summary>
            <param name="aColumn">
            Column in question <see cref="T:Gtk.TreeViewColumn" /></param>
            <param name="aCell">
            CellRenderer associated with this cell <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aModel">
            TreeModel containing this cell <see cref="T:Gtk.TreeModel" /></param>
            <param name="aIter">
            TreeIter associated with this cell <see cref="T:Gtk.TreeIter" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RenderColumnFunc(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.TreeModel,Gtk.TreeIter)">
            <summary>
            Decides wheter some Cell should be visible or not for iterators cell
            </summary>
            <param name="aColumn">
            Column in question <see cref="T:Gtk.TreeViewColumn" /></param>
            <param name="aCell">
            CellRenderer associated with this cell <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aModel">
            TreeModel containing this cell <see cref="T:Gtk.TreeModel" /></param>
            <param name="aIter">
            TreeIter associated with this cell <see cref="T:Gtk.TreeIter" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.NumericCellEdited(System.Object,Gtk.EditedArgs)">
            <summary>
            Generic editing function of String data
            </summary>
            <param name="o">
            CellRenderer in which editing happened <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.EditedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.TextCellEdited(System.Object,Gtk.EditedArgs)">
            <summary>
            Generic editing function of Text data
            </summary>
            <param name="o">
            CellRenderer in which editing happened <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.EditedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.BoolCellToggled(System.Object,Gtk.ToggledArgs)">
            <summary>
            Generic editing function of Bool data
            </summary>
            <param name="o">
            CellRenderer in which editing happened <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.ToggledArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.CellOnEditingStarted(System.Object,Gtk.EditingStartedArgs)">
            <summary>
            Checks if editing is possible on this item
            </summary>
            <param name="o">
            CellRenderer in which editing happened <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.EditingStartedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.TreeViewCreateColumnForMapping(System.Data.Bindings.MappedProperty,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates new column if needed and cell renderer according to the specified needs in mappings
            </summary>
            <param name="aProp">
            Mapped property for which column is being created <see cref="T:System.Data.Bindings.MappedProperty" /></param>
            <param name="aType">
            Type of column <see cref="T:System.Type" /></param>
            <param name="aColumnIndex">
            Column index <see cref="T:System.Int32" /></param>
            <param name="aSubColumnIndex">
            Subcolumn index <see cref="T:System.Int32" /></param>
            <param name="aItemGroup">
            true if this is group item <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RenderIconViewFunc(Gtk.CellLayout,Gtk.CellRenderer,Gtk.TreeModel,Gtk.TreeIter)">
            <summary>
            Decides wheter some Cell should be visible or not for iterators cell
            </summary>
            <param name="aCellLayout">
            CellLayout in question <see cref="T:Gtk.CellLayout" /></param>
            <param name="aCell">
            CellRenderer associated with this cell <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aModel">
            TreeModel containing this cell <see cref="T:Gtk.TreeModel" /></param>
            <param name="aIter">
            TreeIter associated with this cell <see cref="T:Gtk.TreeIter" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RenderComboCellFunc(Gtk.CellLayout,Gtk.CellRenderer,Gtk.TreeModel,Gtk.TreeIter)">
            <summary>
            Decides wheter some Cell should be visible or not for iterators cell
            </summary>
            <param name="aCellLayout">
            CellLayout in question <see cref="T:Gtk.CellLayout" /></param>
            <param name="aCell">
            CellRenderer associated with this cell <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aModel">
            TreeModel containing this cell <see cref="T:Gtk.TreeModel" /></param>
            <param name="aIter">
            TreeIter associated with this cell <see cref="T:Gtk.TreeIter" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RenderComboEntryCellFunc(Gtk.CellLayout,Gtk.CellRenderer,Gtk.TreeModel,Gtk.TreeIter)">
            <summary>
            Decides wheter some Cell should be visible or not for iterators cell
            </summary>
            <param name="aCellLayout">
            CellLayout in question <see cref="T:Gtk.CellLayout" /></param>
            <param name="aCell">
            CellRenderer associated with this cell <see cref="T:Gtk.CellRenderer" /></param>
            <param name="aModel">
            TreeModel containing this cell <see cref="T:Gtk.TreeModel" /></param>
            <param name="aIter">
            TreeIter associated with this cell <see cref="T:Gtk.TreeIter" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RemapComboBox(System.Boolean)">
            <summary>
            Introducing new mapping columns for TreeView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.RemapTreeView">
            <summary>
            Introducing new mapping columns for TreeView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.DSChanged(System.Object)">
            <summary>
            OnListChanged Message handler
            </summary>
            <param name="aList">
            List object that changed <see cref="T:System.Collections.IList" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.DSElementAdded(System.Object,System.Int32[])">
            <summary>
            OnElementAdded Message handler
            </summary>
            <param name="aList">
            List object that had added element <see cref="T:System.Collections.IList" /></param>
            <param name="aIdx">
            Index path to object added <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.DSElementChanged(System.Object,System.Int32[])">
            <summary>
            OnElementChanged Message handler
            </summary>
            <param name="aList">
            List object that had changed element <see cref="T:System.Collections.IList" /></param>
            <param name="aIdx">
            Index path to object changed <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.DSElementRemoved(System.Object,System.Int32[],System.Object)">
            <summary>
            OnElementRemoved Message handler
            </summary>
            <param name="aList">
            List object that had removed element <see cref="T:System.Object" /></param>
            <param name="aIdx">
            Index path to object removed <see cref="T:System.Int32" /></param>
            <param name="aObject">
            Removed element <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.DSElementsSorted(System.Object,System.Int32[])">
            <summary>
            ElementsSorted Message handler
            </summary>
            <param name="aList">
            List object that contains sorted element <see cref="T:System.Object" /></param>
            <param name="aIdx">
            Index path to object being sorted or null if whole list <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappingsImplementor.ListTargetChanged(System.Data.Bindings.IAdaptor)">
            <summary>
            Called when ItemsDataSource changes
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ModelSelector">
            <summary>
            Handles registration and creation of custom query models
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.RegisterModels">
            <summary>
            Registers models in whole assembly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.InitializeModels">
            <summary>
            Registers models in whole assembly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.HandleAssemblyLoaded(System.Object,System.Data.Bindings.NewAssemblyLoadedEventArgs)">
            <summary>
            Processing method which should be called on loading new
            assembly in runtime
            </summary>
            <param name="aAssembly">
            Loaded assembly <see cref="T:System.Reflection.Assembly" /></param>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.RegisterModelsInAssembly(System.Reflection.Assembly,System.Collections.Specialized.StringCollection)">
            <summary>
            Current assembly wide search for the type, type will be found even
            if this assembly doesn't reference to the assembly where type resides
            As long as type is loaded, it will found it no matter what.
            </summary>
            <param name="aAssembly">
            Assembly to check in <see cref="T:System.Reflection.Assembly" /></param>
            <param name="aCache">
            Cache of already checked libraries <see cref="T:System.Collections.Specialized.StringCollection" /></param>
            <returns>
            null if unknown or Type if found <see cref="T:System.Type" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.IsQueryModel(System.Type)">
            <summary>
            Checks if specified type is query model, then checks if model is already registered.
            Next checks for duplicate type handler and if everything is successful registers it
            </summary>
            <param name="aType">
            Type which is checked <see cref="T:System.Type" /></param>
            <returns>
            true if it is model handler, false if not <see cref="T:System.Boolean" /></returns>
            <remarks>
            If registered model for specified type already exists, then it throws
            ExceptionDuplicateQueryModelTypeHandler exception
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.QueryModelExists(System.Type)">
            <summary>
            Checks if specified type is query model, then checks if model is already registered.
            Next checks for duplicate type handler and if everything is successful registers it
            </summary>
            <param name="aType">
            Type which is checked <see cref="T:System.Type" /></param>
            <returns>
            true if it is model handler, false if not <see cref="T:System.Boolean" /></returns>
            <remarks>
            If registered model for specified type already exists, then it throws
            ExceptionDuplicateQueryModelTypeHandler exception
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.ModelSelector.CreateModelFor(Gtk.DataBindings.MappingsImplementor,System.Object)">
            <summary>
            Creates query implementor for specific class, first turn of checking is
            restricted to direct type handling, second turn checks for model that
            handles this type with inheritance in mind
            </summary>
            <param name="aOwnerModel">
            A <see cref="!:MappingImplementor" /></param>
            <param name="aDataSource">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:Gtk.DataBindings.QueryImplementor" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.QueryImplementor">
            <summary>
            Base class from which all QueryImplementors are derived
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.QueryImplementor.MasterImplementor">
            <value>
            Provides reference to master implementor
            </value>
        </member>
        <member name="P:Gtk.DataBindings.QueryImplementor.RespectHierarchy">
            <value>
            Provides global RespectHierarchy value
            </value>
        </member>
        <member name="P:Gtk.DataBindings.QueryImplementor.DataSource">
            <value>
            Provides datasource resolving
            </value>
        </member>
        <member name="M:Gtk.DataBindings.QueryImplementor.IsItemDeleted(System.Object)">
            <summary>
            Checks if item is deleted, classes like data table support rows
            wit state=deleted
            </summary>
            <param name="aObject">
            Object <see cref="T:System.Object" /></param>
            <returns>
            true if deleted, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.QueryImplementor.Disconnect">
            <summary>
            Disconnects references
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.QueryModelAttribute">
            <summary>
            Specifies attribute which defines class is query implementor for
            specific type
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.QueryModelAttribute.ListType">
            <value>
            Type which is handled by derived QueryImplementor
            </value>
        </member>
        <member name="P:Gtk.DataBindings.QueryModelAttribute.Inherited">
            <value>
            Specifies if QueryImplementor handles inherited classes too or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.QueryModelAttribute.ItemTypeOverride">
            <value>
            Provides type override for Query model
            </value>
        </member>
        <member name="T:Gtk.DataBindings.DataTableTreeModel">
            <summary>
            Defines query implementor specific to handle DataTable
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTableTreeModel.Items">
            <summary>
            Reference to DataTable
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.GetFlags">
            <summary>
            Returns flags, in this case ListOnly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.GetNodeAtPath(Gtk.TreePath)">
            <summary>
            Returns node at specified path
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.PathFromNode(System.Object)">
            <summary>
            Searches for node in Items
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterNext(Gtk.TreeIter@)">
            <summary>
            Returns next iter
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.ChildCount(System.Object)">
            <summary>
            Returns child count from node
            </summary>
            <param name="aNode">
            Node <see cref="T:System.Object" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterChildren(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns first iterator in specified parent
            </summary>
            <param name="aChild">
            Child iterator <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterHasChild(Gtk.TreeIter)">
            <summary>
            Checks if iterator has child or not
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if children are present, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterNChildren(Gtk.TreeIter)">
            <summary>
            Returns child count from iterator
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterNthChild(Gtk.TreeIter@,Gtk.TreeIter,System.Int32)">
            <summary>
            Returns n-th child for specified parent
            </summary>
            <param name="aChild">
            N-th child node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="n">
            Index of specifie node <see cref="T:System.Int32" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IterParent(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns parent for iterator
            </summary>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aChild">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.IsItemDeleted(System.Object)">
            <summary>
            Checks if item is deleted, classes like data table support rows
            wit state=deleted
            </summary>
            <param name="aObject">
            Object <see cref="T:System.Object" /></param>
            <returns>
            true if deleted, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataTableTreeModel.Disconnect">
            <summary>
            Disconnects references
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataViewTreeModel">
            <summary>
            Defines query implementor specific to handle DataView
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataViewTreeModel.Items">
            <summary>
            Reference to DataView
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.GetFlags">
            <summary>
            Returns flags, in this case ListOnly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.GetNodeAtPath(Gtk.TreePath)">
            <summary>
            Returns node at specified path
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.PathFromNode(System.Object)">
            <summary>
            Searches for node in Items
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterNext(Gtk.TreeIter@)">
            <summary>
            Returns next iter
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.ChildCount(System.Object)">
            <summary>
            Returns child count from node
            </summary>
            <param name="aNode">
            Node <see cref="T:System.Object" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterChildren(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns first iterator in specified parent
            </summary>
            <param name="aChild">
            Child iterator <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterHasChild(Gtk.TreeIter)">
            <summary>
            Checks if iterator has child or not
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if children are present, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterNChildren(Gtk.TreeIter)">
            <summary>
            Returns child count from iterator
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterNthChild(Gtk.TreeIter@,Gtk.TreeIter,System.Int32)">
            <summary>
            Returns n-th child for specified parent
            </summary>
            <param name="aChild">
            N-th child node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="n">
            Index of specifie node <see cref="T:System.Int32" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IterParent(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns parent for iterator
            </summary>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aChild">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataViewTreeModel.IsItemDeleted(System.Object)">
            <summary>
            Checks if item is deleted, classes like data table support rows
            wit state=deleted
            </summary>
            <param name="aObject">
            Object <see cref="T:System.Object" /></param>
            <returns>
            true if deleted, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.QueryModelDescription">
            <summary>
            Provides description for QueryImplementor models
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.QueryModelDescription.Definition">
            <value>
            Attribute which specifies Query definitions
            </value>
        </member>
        <member name="P:Gtk.DataBindings.QueryModelDescription.Model">
            <value>
            Model type
            </value>
        </member>
        <member name="M:Gtk.DataBindings.QueryModelDescription.CreateModel(Gtk.DataBindings.MappingsImplementor)">
            <summary>
            Creates new model based on Model type
            </summary>
            <param name="aImplementor">
            Master implementor <see cref="!:MappingsImplemetor" /></param>
            <returns>
            New query implementor <see cref="T:Gtk.DataBindings.QueryImplementor" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.QueryModelDescription.HandlesType(System.Type)">
            <summary>
            Checks if this model description handles specified type
            </summary>
            <param name="aType">
            Type <see cref="T:System.Type" /></param>
            <returns>
            true if type is handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.NullTreeModel">
            <summary>
            Model which should be specified on null datasources
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.GetFlags">
            <summary>
            Returns flags, in this case ListOnly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.GetNodeAtPath(Gtk.TreePath)">
            <summary>
            Returns node at specified path
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.PathFromNode(System.Object)">
            <summary>
            Searches for node in Items
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterNext(Gtk.TreeIter@)">
            <summary>
            Returns next iter
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.ChildCount(System.Object)">
            <summary>
            Returns child count from node
            </summary>
            <param name="aNode">
            Node <see cref="T:System.Object" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterChildren(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns first iterator in specified parent
            </summary>
            <param name="aChild">
            Child iterator <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterHasChild(Gtk.TreeIter)">
            <summary>
            Checks if iterator has child or not
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if children are present, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterNChildren(Gtk.TreeIter)">
            <summary>
            Returns child count from iterator
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterNthChild(Gtk.TreeIter@,Gtk.TreeIter,System.Int32)">
            <summary>
            Returns n-th child for specified parent
            </summary>
            <param name="aChild">
            N-th child node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="n">
            Index of specifie node <see cref="T:System.Int32" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.NullTreeModel.IterParent(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns parent for iterator
            </summary>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aChild">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.DataTitleLabel">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataTitleLabel.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataTitleLabel.Important">
            <value>
            Draws title as bolded
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel._TargetChanged(System.Data.Bindings.IAdaptor)">
            <summary>
            Internal method which handles target change and sets new title
            </summary>
            <param name="aAdaptor">
            Adaptor <see cref="T:System.Data.Bindings.IAdaptor" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataTitleLabel.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataLayoutBox">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLayoutBox.ColumnAdaptor">
            <summary>
            Resolves adaptor and it simplifies the simple string
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataLayoutBox.Mappings">
            <summary>
            Link to Widget Mappings in connected Adaptor
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkWidgetFactoryProviderAttribute">
            <summary>
            Specifies Gtk widget factory provider used for automatic widget creation
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkWidgetFactory">
            <summary>
            Provides factory
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.RegisterClass(System.Type)">
            <summary>
            Checks specified type if it provides factory or not and then registers it
            if needed
            </summary>
            <param name="aType">
            Factory type <see cref="T:System.Type" /></param>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.AllWidgets">
            <summary>
            Enumerates all factory providers registred for Gtk
            </summary>
            <returns>
            All invoker classes by specified filter <see cref="T:System.Collections.IEnumerable" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.AllCellWidgets">
            <summary>
            Enumerates all factory providers registred for Gtk
            </summary>
            <returns>
            All invoker classes by specified filter <see cref="T:System.Collections.IEnumerable" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.AllWidgetsForType(System.Type)">
            <summary>
            Enumerates all factory providers by specified filter
            </summary>
            <param name="aType">
            Type for which responsible widgets should be enumerated <see cref="T:System.Type" /></param>
            <returns>
            All invoker classes by specified filter <see cref="T:System.Collections.IEnumerable" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.AllCellWidgetsForType(System.Type)">
            <summary>
            Enumerates all factory providers by specified filter
            </summary>
            <param name="aType">
            Type for which responsible widgets should be enumerated <see cref="T:System.Type" /></param>
            <returns>
            All invoker classes by specified filter <see cref="T:System.Collections.IEnumerable" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.CreateDefaultGtkWidget(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Creates default widgets for properties which don't specify their property description
            </summary>
            <param name="aArgs">
            Widget creation arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.CreateDefaultGtkCellWidget(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Creates default widgets for properties which don't specify their property description
            </summary>
            <param name="aArgs">
            Widget creation arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.CreateWidget(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Factory widget creation
            </summary>
            <param name="aArgs">
            A <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            A <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkWidgetFactory.CreateCell(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Factory widget creation
            </summary>
            <param name="aArgs">
            A <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            A <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.GtkTypeWidgetFactoryProviderAttribute">
            <summary>
            Provides gtk extension of TypeWidgetFactoryProviderAttribute
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkFactoryInvocationArgs">
            <summary>
            Specifies predefined Gtk filter invokation arguments
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataRadioGroup">
            <summary>
            Provides
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataRadioGroup.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataRadioGroup.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataRadioGroup.Toggled">
            <summary>
            Event triggered whenever child radio is toggled
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.InheritedBoundaryDataSource">
            <summary>
            Defines if BoundaryDataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.BoundaryDataSource">
            <summary>
            BoundaryDataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.BoundaryMappings">
            <summary>
            Link to BoundaryMappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataRadioGroup.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="!:FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="!:IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.OnToggled">
            <summary>
            Overrides OnToggled to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.ResetLayout">
            <summary>
            Resets widget layout
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.HandleToggled(System.Object,System.EventArgs)">
            <summary>
            Handles radio toggle event
            </summary>
            <param name="aSender">
            Event sender <see cref="T:System.Object" /></param>
            <param name="aArgs">
            Arguments <see cref="!:EventArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataRadioGroup.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataEnumComboBox">
            <summary>
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataEnumComboBox.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataEnumComboBox.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.InheritedBoundaryDataSource">
            <summary>
            Defines if BoundaryDataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.BoundaryDataSource">
            <summary>
            BoundaryDataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.BoundaryMappings">
            <summary>
            Link to BoundaryMappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEnumComboBox.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.OnChanged">
            <summary>
            Overrides OnToggled to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.ResetLayout">
            <summary>
            Resets widget layout
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEnumComboBox.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DataDateEntry">
            <summary>
            DataDateEntry supports more sophisticated date editing
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.#ctor">
            <summary>
            Creates Widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.#ctor(System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.#ctor(System.Object,System.String)">
            <summary>
            Creates Widget
            </summary>
            <param name="aDataSource">
            DataSource connected to this widget <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this widget <see cref="T:System.String" /></param>
        </member>
        <member name="E:Gtk.DataBindings.DataDateEntry.CustomGetData">
            <summary>
            Overrides basic Get data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	Date = (DateTime) Adaptor.Value;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserGetDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DataDateEntry.CustomPostData">
            <summary>
            Overrides basic Post data behaviour
            Assigning this avoids any value transfer between object and data
            Basic assigning in DateCalendar for example is
            	adaptor.Value = Date;
            where Date is the DateCalendar property and Adaptor.Value is direct
            reference to the mapped property
            public delegate void UserPostDataEvent (ControlAdaptor Adaptor);
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.Mappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataDateEntry.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.GetDataFromDataSource(System.Object)">
            <summary>
            Notification method activated from Adaptor
            </summary>
            <param name="aSender">
            Object that made change <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.PutDataToDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.OnDateChanged">
            <summary>
            Overrides OnChanged to put data in DataSource if needed
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataDateEntry.Finalize">
            <summary>
            Destroys and disconnects Widget
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkItemIconAttribute">
            <summary>
            Attribute which loads its icon picture from resource. Loaded picture
            is then registered into picture store so any additional loading is ommited
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkItemIconAttribute.LoadPictureResource(System.String)">
            <summary>
            Loads Gdk.Pixbuf resource
            </summary>
            <param name="aName">
            Picture resource name <see cref="T:System.String" /></param>
            <returns>
            Picture object <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.GtkItemIconAttribute.RegisterDefaultResourceHandler">
            <summary>
            Registers default resource handler for picture resources
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkItemIconAttribute.LoadPicture">
            <summary>
            Loads Gdk.Pixbuf resource
            </summary>
            <returns>
            Picture object <see cref="T:System.Object" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.GtkItemIconFileAttribute">
            <summary>
            Attribute which loads its icon picture from file. Loaded picture
            is then registered into picture store so any additional loading is ommited
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.GtkItemIconFileAttribute.LoadPicture">
            <summary>
            Loads Gdk.Pixbuf resource
            </summary>
            <returns>
            Picture object <see cref="T:System.Object" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.HorizontalCombo">
            <summary>
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.HorizontalCombo.CellHovered">
            <summary>
            Event triggered when mouse passes over cell
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.HorizontalCombo.CellSelected">
            <summary>
            Event triggered when cell is selected
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.HorizontalCombo.Count">
            <value>
            Returns count of items
            </value>
        </member>
        <member name="P:Gtk.DataBindings.HorizontalCombo.SeparatorLines">
            <value>
            Specifies if lines between cell should be drawn or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.HorizontalCombo.Homogeneous">
            <value>
            Specifies homogeneous layout, aka. wheter all cells should be equal sized or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.HorizontalCombo.Hovered">
            <value>
            Index of item when mouse passes over it
            </value>
        </member>
        <member name="P:Gtk.DataBindings.HorizontalCombo.Selected">
            <value>
            Specifies index of currntly selected cell
            </value>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnCellHovered(System.Int32)">
            <summary>
            Calls event handlers which registered CellHovered event
            </summary>
            <param name="aIndex">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnCellSelected(System.Int32)">
            <summary>
            Calls event handlers which registered CellSelected event
            </summary>
            <param name="aIndex">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnExposeEvent(Gdk.EventExpose)">
            <summary>
            Draws widget
            </summary>
            <param name="evnt">
            Parameters <see cref="T:Gdk.EventExpose" /></param>
            <returns>
            returns true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnButtonPressEvent(Gdk.EventButton)">
            <summary>
            Handles ButtonPressEvent
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventButton" /></param>
            <returns>
            true or false <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnLeaveNotifyEvent(Gdk.EventCrossing)">
            <summary>
            Handles LeaveNotifyEvent
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventCrossing" /></param>
            <returns>
            true or false <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HorizontalCombo.OnMotionNotifyEvent(Gdk.EventMotion)">
            <summary>
            Handles MotionNotifyEvent
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventMotion" /></param>
            <returns>
            true or false <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.ChameleonTemplates">
            <summary>
            Provides store where base classes can be found and shared
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.Button">
            <value>
            Provides button template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.Entry">
            <value>
            Provides entry template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.ComboBox">
            <value>
            Provides entry template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.Arrow">
            <value>
            Provides entry template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.EventBox">
            <value>
            Provides entry template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.HSeparator">
            <value>
            Provides HSeparator template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.VSeparator">
            <value>
            Provides VSeparator template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.HScale">
            <value>
            Provides HScale template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.VScale">
            <value>
            Provides VScale template
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ChameleonTemplates.ProgressBar">
            <value>
            Provides VScale template
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.TransparentSelectionEventBox">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.HComboCellEnum">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.HComboCell">
            <summary>
            Specifies base for derived horizontal combo box cells
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.HComboCell.CellChanged">
            <value>
            Event triggered on cell change
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCell.ItemState">
            <value>
            Specifies item state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCell.Layout">
            <value>
            Defines item layout, some derived classes might handle it, some not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCell.DisplayMode">
            <value>
            Specifies display mode
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCell.ImageVisible">
            <value>
            Resolves if image is visible
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCell.TextVisible">
            <value>
            Resolves if text is visible
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.HComboCell.OnCellChanged(Gtk.ExtraWidgets.CellChangedType)">
            <summary>
            Notifies clients about change in the cell
            </summary>
            <param name="aChangeType">
            Type of change <see cref="T:Gtk.ExtraWidgets.CellChangedType" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.HComboCell.SetLayout">
            <summary>
            Custom layout method
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.HComboCellWidget">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.HComboCellText">
            <summary>
            Cell specifying one label
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.HComboCellText.Text">
            <value>
            Text displayed in cell
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.HComboCellText.OnCellChanged(Gtk.ExtraWidgets.CellChangedType)">
            <summary>
            Cell changed event
            </summary>
            <param name="aChangeType">
            Change type <see cref="T:Gtk.ExtraWidgets.CellChangedType" /></param>
        </member>
        <member name="T:Gtk.DataBindings.AssemblyDevelopmentInformationQueryModel">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.AssemblyDevelopmentInformationQueryModel.Items">
            <summary>
            Reference to IList
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.HierarchicalShellQueryModel">
            <summary>
            Provides shell for implementation of linear list query models
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetMasterItemChildCount">
            <summary>
            Returns master item count
            </summary>
            <returns>
            Item count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetMasterItemAtIndex(System.Int32)">
            <summary>
            Resolves item in master list at specified index, all checking
            </summary>
            <param name="aIndex">
            Index of node <see cref="T:System.Int32" /></param>
            <returns>
            Object at index or null <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetMasterItemIndex(System.Object)">
            <summary>
            Resolves index of specified items, this method must be overriden in derivatives
            </summary>
            <param name="aNode">
            Object <see cref="T:System.Object" /></param>
            <returns>
            Index or -1 if not found <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetItemAtIndex(System.Int32[])">
            <summary>
            Resolves item at specified index, all checking
            </summary>
            <param name="aIndex">
            Index of node <see cref="T:System.Int32" /></param>
            <returns>
            Object at index or null <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetItemIndex(System.Object,System.Boolean)">
            <summary>
            Resolves index of specified items, this method must be overriden in derivatives
            </summary>
            <param name="aNode">
            Object <see cref="T:System.Object" /></param>
            <param name="aDeepSearch">
            Specifies if search should go deeper into hierarchy <see cref="T:System.Boolean" /></param>
            <returns>
            Index or -1 if not found <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetItemChildCount(System.Object)">
            <summary>
            Returns child count for specified item
            </summary>
            <param name="aNode">
            Item <see cref="T:System.Object" /></param>
            <returns>
            Number of child items <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.GetItemChildAtIndex(System.Object,System.Int32)">
            <summary>
            Resolves n-th item for specified node
            </summary>
            <param name="aNode">
            Node <see cref="T:System.Object" /></param>
            <param name="aIndex">
            Index of node <see cref="T:System.Int32" /></param>
            <returns>
            Object at index or null <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.HierarchicalShellQueryModel.IsItemDeleted(System.Object)">
            <summary>
            Checks if item is deleted, classes like data table support rows
            wit state=deleted
            </summary>
            <param name="aObject">
            Object <see cref="T:System.Object" /></param>
            <returns>
            true if deleted, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.LinearListShellQueryModel">
            <summary>
            Provides shell for implementing query models for linear lists
            </summary>
            <remarks>
            The only things one has to implement is overrides for methods
            protected virtual object GetItemAtIndex (int aIndex)
            protected virtual int GetItemIndex (object aNode)
            protected virtual int GetDataSourceItemCount()
            and optional method
            public override bool IsItemDeleted (object aObject)
            and query model is already handled correctly
            </remarks>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.GetItemCount">
            <summary>
            Returns master item count
            </summary>
            <returns>
            Item count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.GetItemAtIndex(System.Int32)">
            <summary>
            Resolves item at specified index, all checking
            </summary>
            <param name="aIndex">
            Index of node <see cref="T:System.Int32" /></param>
            <returns>
            Object at index or null <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.GetItemIndex(System.Object)">
            <summary>
            Resolves index of specified items, this method must be overriden in derivatives
            </summary>
            <param name="aNode">
            Object <see cref="T:System.Object" /></param>
            <returns>
            Index or -1 if not found <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IsItemDeleted(System.Object)">
            <summary>
            Checks if item is deleted, classes like data table support rows
            wit state=deleted
            </summary>
            <param name="aObject">
            Object <see cref="T:System.Object" /></param>
            <returns>
            true if deleted, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.GetFlags">
            <summary>
            Returns flags, in this case ListOnly
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.GetNodeAtPath(Gtk.TreePath)">
            <summary>
            Returns node at specified path
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.PathFromNode(System.Object)">
            <summary>
            Searches for node in Items
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterNext(Gtk.TreeIter@)">
            <summary>
            Returns next iter
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.ChildCount(System.Object)">
            <summary>
            Returns child count from node
            </summary>
            <param name="aNode">
            Node <see cref="T:System.Object" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterChildren(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns first iterator in specified parent
            </summary>
            <param name="aChild">
            Child iterator <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterHasChild(Gtk.TreeIter)">
            <summary>
            Checks if iterator has child or not
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if children are present, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterNChildren(Gtk.TreeIter)">
            <summary>
            Returns child count from iterator
            </summary>
            <param name="aIter">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            Child count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterNthChild(Gtk.TreeIter@,Gtk.TreeIter,System.Int32)">
            <summary>
            Returns n-th child for specified parent
            </summary>
            <param name="aChild">
            N-th child node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="n">
            Index of specifie node <see cref="T:System.Int32" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.IterParent(Gtk.TreeIter@,Gtk.TreeIter)">
            <summary>
            Returns parent for iterator
            </summary>
            <param name="aParent">
            Parent node <see cref="T:Gtk.TreeIter" /></param>
            <param name="aChild">
            Iterator <see cref="T:Gtk.TreeIter" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.LinearListShellQueryModel.Disconnect">
            <summary>
            Disconnects references
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.MemberDevelopmentInformationQueryModel">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MemberDevelopmentInformationQueryModel.Items">
            <summary>
            Reference to IList
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRenderer">
            <summary>
            CellRenderer used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRenderer.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRenderer.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRenderer.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRenderer.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRenderer.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRenderer.GetDataProperty">
            <summary>
            Returns default data property
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRenderer.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererText">
            <summary>
            CellRendererText used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererText.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererText.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererText.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererText.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererText.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererText.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererText.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererToggle">
            <summary>
            CellRendererToggle used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererToggle.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererToggle.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererToggle.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererToggle.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererToggle.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererToggle.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererToggle.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererCombo">
            <summary>
            CellRendererCombo used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCombo.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCombo.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCombo.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCombo.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCombo.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCombo.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererPixbuf">
            <summary>
            CellRendererPixbuf used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererPixbuf.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererPixbuf.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererPixbuf.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererPixbuf.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererPixbuf.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererPixbuf.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererPixbuf.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererProgress">
            <summary>
            CellRendererProgress used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererProgress.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererProgress.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererProgress.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererProgress.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererProgress.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererProgress.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererProgress.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.GtkCellFactoryProviderAttribute">
            <summary>
            Specifies Gtk widget factory provider used for automatic widget creation
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.GtkTypeCellFactoryProviderAttribute">
            <summary>
            Provides gtk extension of TypeWidgetFactoryProviderAttribute
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererSpin">
            <summary>
            CellRendererPixbuf used by DataTreeView and DataComboBox.
            Additional functionality is providing information where and
            how it is mapped
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererSpin.MappedType">
            <value>
            System.Type resolved for this mapping
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererSpin.MappedTo">
            <value>
            Name of the mapped property
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererSpin.ColumnIndex">
            <value>
            Column index of this CellRenderer
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererSpin.IsSubItem">
            <value>
            Returns true if this is subitem in another column
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererSpin.SubColumnIndex">
            <value>
            If this is subitem column of another column, then it specifies
            index number of that column
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererSpin.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererSpin.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.ArrayQueryModel">
            <summary>
            Query model that handles arrays
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.ArrayQueryModel.GetItemAtIndex(System.Int32)">
            <summary>
            Gets object at specified index
            </summary>
            <param name="aIndex">
            Index <see cref="T:System.Int32" /></param>
            <returns>
            Object at index <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ArrayQueryModel.GetItemCount">
            <summary>
            Returns count of items
            </summary>
            <returns>
            Item count <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.ArrayQueryModel.GetItemIndex(System.Object)">
            <summary>
            Searches array for specified object
            </summary>
            <param name="aNode">
            Object <see cref="T:System.Object" /></param>
            <returns>
            Index of object <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.DateEntry.DataPart">
            <value>
            Data parts
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.DateText.Part">
            <value>
            Specifies part which is edited
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.DateText.Selected">
            <value>
            Resolves if text is selected or not
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.DateText.Refresh">
            <summary>
            Refreshes data
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DateEntry.StartCalculator">
            <summary>
            Event triggered on start calculator
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DateEntry.ClearData">
            <summary>
            Event triggered on clear data
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DateEntry.DropDown">
            <summary>
            Event triggered on drop down
            </summary>
        </member>
        <member name="E:Gtk.DataBindings.DateEntry.DateChanged">
            <summary>
            Event triggered on every date change
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.MaxNumber">
            <value>
            Specifies max number which can be entred in selected part
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.CurrentPart">
            <value>
            Specifies value of current editing
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.Day">
            <value>
            Specifies day which is valid
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.EntredDay">
            <value>
            Specifies date which was entred
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.HasDropDown">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.HasClearButton">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.HasCalculator">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.TimeAsString">
            <value>
            Returns time as string in currently edited format
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.Date">
            <value>
            Time
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.Editable">
            <value>
            Specifies if widget is editable or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DateEntry.Selected">
            <value>
            Specifies selected part
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnDateChanged">
            <summary>
            Executes DateChanged event
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnStartCalculator">
            <summary>
            Exeutes StartCalculator event
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnClearData">
            <summary>
            Executes ClearData event
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnDropDown">
            <summary>
            Executes DropDown event
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.GetTimeAsString(System.DateTime)">
            <value>
            Returns time as string in currently edited format
            </value>
            <param name="aTime">
            Time <see cref="T:System.DateTime" /></param>
            <returns>
            Time as string <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.ResetEditingParts">
            <summary>
            Resets editing parts
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.GetDatePart(Gtk.DataBindings.DateEntry.DataPart)">
            <summary>
            Gets label which displays specified part
            </summary>
            <param name="aPart">
            Part <see cref="T:Gtk.DataBindings.DateEntry.DataPart" /></param>
            <returns>
            Label cell <see cref="!:TimeText" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.RefreshLabels">
            <summary>
            Refreshes labels and redraws
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.SelectNext">
            <summary>
            Selects next part
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.SelectPrev">
            <summary>
            Selects previous part
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.PostEditing(System.Boolean)">
            <summary>
            Posts editing to current selection
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.ResetEditing">
            <summary>
            Posts editing to current selection and resets
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnFocusInEvent(Gdk.EventFocus)">
            <summary>
            Handles focus in event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventFocus" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnFocusOutEvent(Gdk.EventFocus)">
            <summary>
            Handles focus out event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventFocus" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            Handles SizeRequested message
            </summary>
            <param name="requisition">
            Requisition <see cref="T:Gtk.Requisition" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnKeyPressEvent(Gdk.EventKey)">
            <summary>
            Handles KeyPress event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventKey" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnKeyReleaseEvent(Gdk.EventKey)">
            <summary>
            Handles KeyRelease event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventKey" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.OnButtonPressEvent(Gdk.EventButton)">
            <summary>
            Handles ButtonPress event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventButton" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.StoreBuffer">
            <summary>
            Stores buffer
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DateEntry.CreateBox">
            <summary>
            Creates DrawingCellBox
            </summary>
            <returns>
            Created box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.DataAutoWidget">
            <summary>
            Event box which auto creates widget trough factory based on momentary property or
            default property based on specified type
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.DataWidget">
            <value>
            Provides access to widget handling the data
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.Mappings">
            <value>
            Specifies mappings
            </value>
        </member>
        <member name="P:Gtk.DataBindings.DataAutoWidget.Editable">
            <value>
            Specifies if widget is editable or not
            </value>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.GetDataFromDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.SetNullWidget">
            <summary>
            Destroys widget
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataAutoWidget.HandleTargetChanged(System.Data.Bindings.IAdaptor)">
            <summary>
            Handles event whenever target changes
            </summary>
            <param name="aAdaptor">
            Adaptor <see cref="T:System.Data.Bindings.IAdaptor" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererCurrency">
            <summary>
            Specifies cell renderer which handles date
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCurrency.ShowCurrency">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCurrency.IsImportant">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererCurrency.Value">
            <value>
            Specifies property which is used to assign value
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCurrency.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCurrency.GetDataText(System.Object,System.String)">
            <summary>
            Converts data to defined string
            </summary>
            <param name="aData">
            Data <see cref="T:System.Object" /></param>
            <returns>
            String representation <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCurrency.GetDataProperty">
            <summary>
            Returns default data property
            </summary>
            <returns>
            Property name <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCurrency.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererCustomText">
            <summary>
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererCustomText.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererDate">
            <summary>
            Specifies cell renderer which handles date
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDate.LongDate">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDate.IsImportant">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDate.Date">
            <value>
            Specifies property which is used to assign value
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDate.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDate.GetDataProperty">
            <summary>
            Returns default data property
            </summary>
            <returns>
            Property name <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDate.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererTime">
            <summary>
            Specifies cell renderer which handles date
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererTime.IsImportant">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererTime.ShowAMPMDesignator">
            <value>
            Specifies if seconds should be shown or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererTime.ShowSeconds">
            <value>
            Specifies if seconds should be shown or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererTime.ShowMilliseconds">
            <value>
            Specifies if milliseconds should be shown or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererTime.Time">
            <value>
            Specifies property which is used to assign value
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererTime.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererTime.GetDataProperty">
            <summary>
            Returns default property for value in cellrenderer
            </summary>
            <returns>
            property name as defined in gtk <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererTime.GetTimeString">
            <summary>
            Resolves display string for time
            </summary>
            <returns>
            String representation <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererTime.ResetCellSize">
            <summary>
            Returns default measunring string for cell size
            </summary>
            <returns>
            A <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererTime.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.DataEventBox">
            <summary>
            CheckButton control connected to adaptor and direct updating if connected object
            supports IChangeable
            Supports single mapping
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.#ctor">
            <summary>
            Creates Container
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.#ctor(System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.#ctor(System.Object,System.String)">
            <summary>
            Creates Container
            </summary>
            <param name="aDataSource">
            DataSource connected to this container <see cref="T:System.Object" /></param>
            <param name="aMappings">
            Mappings with this container <see cref="T:System.String" /></param>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.Adaptor">
            <summary>
            Resolves ControlAdaptor in read-only mode
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.InheritedDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.DataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.InheritedBoundaryDataSource">
            <summary>
            Defines if DataSource is inherited fom parent controls or not
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.BoundaryDataSource">
            <summary>
            DataSource object control is connected to
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.DataEventBox.BoundaryMappings">
            <summary>
            Link to Mappings in connected Adaptor
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.CallAdaptorGetData(System.Object)">
            <summary>
            Calls ControlAdaptors method to transfer data, so it can be wrapped
            into widget specific things and all checkups
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.GetDataFromDataSource(System.Object)">
            <summary>
            Updates parent object to DataSource object
            </summary>
            <param name="aSender">
            Sender object <see cref="T:System.Object" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.NotifyAdaptorsOnAdd(System.Object,Gtk.AddedArgs)">
            <summary>
            Notifies adaptors on adding widget to this container
            </summary>
            <param name="o">
            Widget added to this container <see cref="T:System.Object" /></param>
            <param name="a">
            Added arguments <see cref="T:Gtk.AddedArgs" /></param>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.IsContainer">
            <summary>
            Dummy resolver for container controls
            </summary>
            <returns>
            true <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.DataEventBox.Finalize">
            <summary>
            Disconnects and destroys Container
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.ClipboardHelper">
            <summary>
            Provides methods to handle clipboard
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellPixbuf">
            <summary>
            Specifies cell which draws pixbuf
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPixbuf.Pixbuf">
            <value>
            Pixbuf
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellPixbuf.SetFromResource(System.String)">
            <summary>
            Loads pixbuf from resource
            </summary>
            <param name="aName">
            Resource name <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellPixbuf.SetFromFile(System.String)">
            <summary>
            Set pixbuf from file
            </summary>
            <param name="aFile">
            File name <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellPixbuf.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellPixbuf.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.HDrawingArea">
            <summary>
            Specifies DrawingArea with horizontally aligned drawing cells
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.HDrawingArea.CreateBox">
            <summary>
            Creates main box which defines basic layout
            </summary>
            <returns>
            Box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods">
            <summary>
            Publishes methods which are usefull for ExtraWidgets and beyond
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.GetCairoColor(Gdk.Color)">
            <summary>
            Converts Gdk Color to Cairo Color
            </summary>
            <param name="aColor">
            Color <see cref="T:Gdk.Color" /></param>
            <returns>
            Cairo color <see cref="T:Cairo.Color" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.GetGdkColor(Cairo.Color)">
            <summary>
            Converts Cairo Color to Gdk Color
            </summary>
            <param name="aColor">
            Color <see cref="T:Gdk.Color" /></param>
            <returns>
            Gdk color <see cref="T:Cairo.Color" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.IsEqualColor(Gdk.Color,Gdk.Color)">
            <summary>
            Compares colors if they are equal
            </summary>
            <param name="aColor">
            Original color <see cref="T:Gdk.Color" /></param>
            <param name="aCompareTo">
            Compared to <see cref="T:Gdk.Color" /></param>
            <returns>
            true if equal false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.IsEqualColor(Cairo.Color,Cairo.Color)">
            <summary>
            Compares colors if they are equal
            </summary>
            <param name="aColor">
            Original color <see cref="T:Cairo.Color" /></param>
            <param name="aCompareTo">
            Compared to <see cref="T:Cairo.Color" /></param>
            <returns>
            true if equal false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.IsEqualColor(Gdk.Color,Cairo.Color)">
            <summary>
            Compares colors if they are equal
            </summary>
            <param name="aColor">
            Original color <see cref="T:Gdk.Color" /></param>
            <param name="aCompareTo">
            Compared to <see cref="T:Cairo.Color" /></param>
            <returns>
            true if equal false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.IsEqualColor(Cairo.Color,Gdk.Color)">
            <summary>
            Compares colors if they are equal
            </summary>
            <param name="aColor">
            Original color <see cref="T:Cairo.Color" /></param>
            <param name="aCompareTo">
            Compared to <see cref="T:Gdk.Color" /></param>
            <returns>
            true if equal false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.Copy(Cairo.Rectangle)">
            <summary>
            Creates copy of Cairo rectangle
            </summary>
            <param name="aRectangle">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
            <returns>
            Copy <see cref="T:Cairo.Rectangle" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.CopyAndGrow(Cairo.Rectangle,System.Double)">
            <summary>
            Creates copy of Cairo rectangle and grows it by specified number
            </summary>
            <param name="aRectangle">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
            <param name="aGrowFor">
            Growth size <see cref="T:System.Double" /></param>
            <returns>
            New rectangle <see cref="T:Cairo.Rectangle" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.CopyAndShrink(Cairo.Rectangle,System.Double)">
            <summary>
            Creates copy of Cairo rectangle and shrinks it by specified number
            </summary>
            <param name="aRectangle">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
            <param name="aGrowFor">
            Shrink size <see cref="T:System.Double" /></param>
            <returns>
            New rectangle <see cref="T:Cairo.Rectangle" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.LoadPixbufFromResourceStore(Gtk.Widget,System.String)">
            <summary>
            Loads pixbuf resource from store, if specified pixbuf is not already loaded in
            store, then this methods loads it from list of resources and registers it
            </summary>
            <param name="aWidget">
            Extension method per widget <see cref="T:Gtk.Widget" /></param>
            <param name="aName">
            Resource name <see cref="T:System.String" /></param>
            <returns>
            Result pixbuf <see cref="T:Gdk.Pixbuf" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.LoadPixbufFromResourceStore(Gtk.ExtraWidgets.IDrawingCell,System.String)">
            <summary>
            Loads pixbuf resource from store, if specified pixbuf is not already loaded in
            store, then this methods loads it from list of resources and registers it
            </summary>
            <param name="aWidget">
            Extension method per drawing cell <see cref="T:Gtk.Widget" /></param>
            <param name="aName">
            Resource name <see cref="T:System.String" /></param>
            <returns>
            Result pixbuf <see cref="T:Gdk.Pixbuf" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.LoadPixbufFromResourceStore(Cairo.Context,System.String)">
            <summary>
            Loads pixbuf resource from store, if specified pixbuf is not already loaded in
            store, then this methods loads it from list of resources and registers it
            </summary>
            <param name="aWidget">
            Extension method per cairo context <see cref="T:Gtk.Widget" /></param>
            <param name="aName">
            Resource name <see cref="T:System.String" /></param>
            <returns>
            Result pixbuf <see cref="T:Gdk.Pixbuf" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ExtraWidgetsExtensionMethods.LoadPixbufFromResourceStore(Cairo.Surface,System.String)">
            <summary>
            Loads pixbuf resource from store, if specified pixbuf is not already loaded in
            store, then this methods loads it from list of resources and registers it
            </summary>
            <param name="aWidget">
            Extension method per cairo surface <see cref="T:Gtk.Widget" /></param>
            <param name="aName">
            Resource name <see cref="T:System.String" /></param>
            <returns>
            Result pixbuf <see cref="T:Gdk.Pixbuf" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.CellDrawingArea">
            <summary>
            Base for DrawingArea packed with cells
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.CellDrawingArea.PropertyChanged">
            <summary>
            PropertyChanged delegate as specified in INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.IsCellRenderer">
            <value>
            Specifies widget as cell renderer
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.HandlesPrelight">
            <value>
            If true then EnterNotifyEvent and LeaveNotifyEvent handle widget Prelight state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.MainBox">
            <value>
            Provides access to master cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.Spacing">
            <value>
            Spacing between cells
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.Padding">
            <value>
            Spacing between cells
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.ExpandContents">
            <value>
            Specifies if contents should be expanded or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.Count">
            <value>
            Cell count
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.CellDrawingArea.Cells">
            <value>
            Access to cells
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.OnPropertyChanged(System.String)">
            <summary>
            Method calls PropertyChanged if it is not null, but it allows external
            objects to access this one for convinience
            </summary>
            <param name="aPropertyName">
            Name of the property which changed <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.PaintCells(Gdk.EventExpose,Gdk.Drawable,Cairo.Context,Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Method which paints cells
            </summary>
            <param name="evnt">
            Expose event parameters <see cref="T:Gdk.EventExpose" /></param>
            <param name="aContext">
            Cairo context <see cref="T:Cairo.Context" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.PaintBackground(Gdk.EventExpose,Cairo.Context,Cairo.Rectangle)">
            <summary>
            Method which paints background
            </summary>
            <param name="evnt">
            Expose event parameters <see cref="T:Gdk.EventExpose" /></param>
            <param name="aContext">
            Cairo context <see cref="T:Cairo.Context" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.OnExposeEvent(Gdk.EventExpose)">
            <summary>
            Expose event handler, calls PaintBackground and then PaintCells
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventExpose" /></param>
            <returns>
            true if successful, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.CellAtCoordinates(System.Int32,System.Int32)">
            <summary>
            Returns cell which takes place on specified coordinates
            </summary>
            <param name="aX">
            X <see cref="T:System.Int32" /></param>
            <param name="aY">
            Y <see cref="T:System.Int32" /></param>
            <returns>
            Cell or null <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></returns>
            <remarks>
            This method is usefull for mouse resolving
            </remarks>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Area occupied by widget <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            Calculates requisition
            </summary>
            <param name="requisition">
            Requisition <see cref="T:Gtk.Requisition" /></param>
            <remarks>
            Must be overriden
            </remarks>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.PackStart(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as first
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.PackEnd(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as last
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellDrawingArea.CreateBox">
            <summary>
            Creates main box which defines basic layout
            </summary>
            <returns>
            Box <see cref="T:Gtk.ExtraWidgets.DrawingCellPaintedBox" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellCollection">
            <summary>
            Provides collection of drawing cells
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellCollection.Item(System.Int32)">
            <value>
            Returns Cell at specified index
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellCollection.Count">
            <value>
            Returns cell count
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellCollection.VisibleCount">
            <value>
            Returns count of the visible items
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellCollection.PackEnd(Gtk.ExtraWidgets.IDrawingCell)">
            <summary>
            Packs new cell at end of the list
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellCollection.PackStart(Gtk.ExtraWidgets.IDrawingCell)">
            <summary>
            Packs new cell at start of the list
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellCollection.GetEnumerator">
            <summary>
            Returns enumerator
            </summary>
            <returns>
            Enumerator <see cref="T:System.Collections.IEnumerator" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellCollection.Remove(Gtk.ExtraWidgets.IDrawingCell)">
            <summary>
            Removes cell from collection
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCell">
            <summary>
            Base for IDrawingCell implementations
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Arguments">
            <value>
            Arguments passed on action
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.IsVisible">
            <summary>
            Checks if cell is visible or not
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Visible">
            <value>
            Specifies if cell is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Area">
            <value>
            Specifies are defined for cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Padding">
            <value>
            Specifies padding border width for cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.MinWidth">
            <value>
            Specifies padding border width for cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.MinHeight">
            <value>
            Specifies padding border width for cell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Owner">
            <value>
            Specifies owner
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Master">
            <value>
            Returns top most owner of the cells who isn't IDrawingCell
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCell.Expanded">
            <value>
            Speceifies if cell is expanded or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCell.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCell.GetSize(System.Double@,System.Double@)">
            <summary>
            Resolves size needed for cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCell.CellAtCoordinates(System.Double,System.Double)">
            <summary>
            Returns cell which takes place on specified coordinates
            </summary>
            <param name="aX">
            X <see cref="T:System.Double" /></param>
            <param name="aY">
            Y <see cref="T:System.Double" /></param>
            <returns>
            Cell or null <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></returns>
            <remarks>
            This method is usefull for mouse resolving
            </remarks>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCell.GetCellSize(System.Double@,System.Double@)">
            <summary>
            Resolves size needed for cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellFrame">
            <summary>
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellFrame.PaintBorder(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints border on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellFrame.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellFrame.GetSize(System.Double@,System.Double@)">
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellGdkColorFrame">
            <summary>
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellGdkColorFrame.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellGdkColorFrame.GetSize(System.Double@,System.Double@)">
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellText">
            <summary>
            Specifies cell which draws pixbuf
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellText.Text">
            <value>
            Text which specifies Pango markup language
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellText.DisplayText">
            <value>
            Display value of text
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellText.SizeText">
            <value>
            Text used to measure size of the cell
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellText.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellText.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellContent">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.VDrawingArea">
            <summary>
            Specifies DrawingArea with horizontally aligned drawing cells
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.VDrawingArea.CreateBox">
            <summary>
            Creates main box which defines basic layout
            </summary>
            <returns>
            Box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellNull">
            <summary>
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellNull.GetSize(System.Double@,System.Double@)">
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellNull.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellEditText">
            <summary>
            Cell that supports drawing tet in different states
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.Error">
            <value>
            Specifies if error should be drawn
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.Selected">
            <value>
            Specifies if selection should be drawn
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.IsImportant">
            <value>
            Defines text as important
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.SelectionOrErrorIsImportant">
            <value>
            Specifies if error or selection should be drawn as important
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.DrawImportant">
            <value>
            Checks if text should be drawn as important
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellEditText.DisplayText">
            <value>
            Returns markup string for display text
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellBox">
            <summary>
            Specifies container cell
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.IsVisible">
            <summary>
            Checks if cell is visible or not
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.Homogeneous">
            <value>
            Specifies that cell sizes are equal
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.Spacing">
            <value>
            Spacing between cells
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.Count">
            <value>
            Cell count
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.Cells">
            <value>
            Access to cells
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBox.VisibleCount">
            <value>
            Returns number of visible cells
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.PaintCells(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.PaintBackground(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.CalculateBackgroundRect(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates background drawing rect, rectangle can reside out of clipping area
            </summary>
            <param name="aArea">
            Area <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
            <returns>
            Result rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.RecalcChildren">
            <summary>
            Forces recalc of boxed children
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.DoCalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Area occupied by widget <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Area occupied by widget <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.Pack(Gtk.ExtraWidgets.IDrawingCell)">
            <summary>
            Packs cell into container
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <remarks>
            if cell already exists, exception is thrown
            </remarks>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.PackStart(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as first
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.PackEnd(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as last
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.Remove(Gtk.ExtraWidgets.IDrawingCell)">
            <summary>
            Removes cell from collection
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBox.CellAtCoordinates(System.Double,System.Double)">
            <summary>
            Returns cell which takes place on specified coordinates
            </summary>
            <param name="aX">
            X <see cref="T:System.Double" /></param>
            <param name="aY">
            Y <see cref="T:System.Double" /></param>
            <returns>
            Cell at specified coordinates <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellHBox">
            <summary>
            Specifies horizontally packed cell container
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHBox.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHBox.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellVBox">
            <summary>
            Specifies vertically packed cell container
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellVBox.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellVBox.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellBin">
            <summary>
            Specifies drawing cell which contains one single cell
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellBin.Cell">
            <value>
            Cell inside this container
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBin.PackStart(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as first
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBin.PackEnd(Gtk.ExtraWidgets.IDrawingCell,System.Boolean)">
            <summary>
            Packs cell as last
            </summary>
            <param name="aCell">
            Cell <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aExpanded">
            Cell is expanded if true, only one expanded cell is supported <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBin.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellBin.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellVSeparator">
            <summary>
            Cell specifying vertical separator
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellVSeparator.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellVSeparator.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellHSeparator">
            <summary>
            Cell specifying horizontal separator
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHSeparator.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHSeparator.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellProgress">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellProgress.Progress">
            <value>
            Specifies progress
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellProgress.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellProgress.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellArrow">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellArrow.ArrowType">
            <value>
            Specifies arrow type
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellArrow.GetSize(System.Double@,System.Double@)">
            <summary>
            Calculates size needed for this cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellArrow.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellButton">
            <summary>
            Specifies drawing cell which acts as container and draws like button
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.DrawingCellButton.Activated">
            <summary>
            Event called on click
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellButton.Pressed">
            <value>
            Specifies if button should be drawn as pressed or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellButton.HasDefault">
            <value>
            Specifies if button should be drawn as pressed or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellButton.HasFocus">
            <value>
            Specifies if button should be drawn as pressed or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellButton.PaintBackground(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellButton.Activate">
            <summary>
            Calls Activated event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellButton.GetStyle">
            <summary>
            Resolves style used for drawing this container
            </summary>
            <returns>
            Style <see cref="T:Gtk.Style" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellPaintedBox">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPaintedBox.BackgroundColor">
            <value>
            Specifies background color
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPaintedBox.FrameColor">
            <value>
            Specifies background color
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPaintedBox.BackgroundPainted">
            <value>
            Specifies if background should be painted or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPaintedBox.FramePainted">
            <value>
            Specifies if frame should be painted or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellPaintedBox.FrameWidth">
            <value>
            Specifies frame line width
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellPaintedBox.Paint(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellHelper">
            <summary>
            Provides static methods
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.HBoxGetSize(Gtk.ExtraWidgets.DrawingCellBox,System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Requested width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Requested height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.HBoxCalculateCellAreas(Gtk.ExtraWidgets.DrawingCellBox,Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Cairo.Rectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.VBoxGetSize(Gtk.ExtraWidgets.DrawingCellBox,System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Requested width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Requested height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.VBoxCalculateCellAreas(Gtk.ExtraWidgets.DrawingCellBox,Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.BinGetSize(Gtk.ExtraWidgets.DrawingCellBox,System.Double@,System.Double@)">
            <summary>
            Calculates container size
            </summary>
            <param name="aWidth">
            Requested width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Requested height <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellHelper.BinCalculateCellAreas(Gtk.ExtraWidgets.DrawingCellBox,Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Bounding rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellThemedBin">
            <summary>
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellThemedBin.SideCut">
            <value>
            Specifies arrow type
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellThemedBin.Style">
            <value>
            Specifies style used to draw the cell
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellThemedBin.GetStyle">
            <summary>
            Resolves style used to draw the cell
            </summary>
            <returns>
            Style <see cref="T:Gtk.Style" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellThemedBin.DoCalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates Children areas
            </summary>
            <param name="aRect">
            Rectangle <see cref="T:Cairo.Rectangle" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellThemedBin.CalculateBackgroundRect(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates background drawing rect, rectangle can reside out of clipping area
            </summary>
            <param name="aArea">
            Area <see cref="T:Cairo.Rectangle" /></param>
            <returns>
            Result rectangle <see cref="T:Cairo.Rectangle" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellThemedBin.GetCellSize(System.Double@,System.Double@)">
            <summary>
            Resolves size needed for cell
            </summary>
            <param name="aWidth">
            Cell width <see cref="T:System.Double" /></param>
            <param name="aHeight">
            Cell height <see cref="T:System.Double" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellEntry">
            <summary>
            Specifies drawing cell which acts as container and draws like button
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellEntry.PaintBackground(Gtk.ExtraWidgets.CellExposeEventArgs)">
            <summary>
            Paints cell on cairo context
            </summary>
            <param name="aArgs">
            A <see cref="T:Gtk.ExtraWidgets.CellExposeEventArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellEntry.GetStyle">
            <summary>
            Resolves style used for drawing this container
            </summary>
            <returns>
            Style <see cref="T:Gtk.Style" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.TimeEntry">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.TimeEntry.DataPart">
            <value>
            Data parts
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.TimeText.Part">
            <value>
            Specifies part which is edited
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.TimeText.Selected">
            <value>
            Resolves if text is selected or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.TimeText.Refresh">
            <summary>
            Refreshes data
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.TimeEntry.StartCalculator">
            <summary>
            Event triggered on start calculator
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.TimeEntry.ClearData">
            <summary>
            Event triggered on clear data
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.TimeEntry.DropDown">
            <summary>
            Event triggered on drop down
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.TimeEntry.TimeChanged">
            <summary>
            Event triggered on every time change
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.TimeEntry.PropertyChanged">
            <summary>
            PropertyChanged delegate as specified in INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.MaxNumber">
            <value>
            Specifies max number which can be entred in selected part
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.HasDropDown">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.HasClearButton">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.HasCalculator">
            <value>
            Specifies if DropDown button is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.CurrentPart">
            <value>
            Specifies value of current editing
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.EditSeconds">
            <value>
            Specifies if editing of seconds is enabled
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.EditMilliseconds">
            <value>
            Specifies if editing of seconds is enabled
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.TwelveHour">
            <value>
            Specifies if widget uses 12 hour or 24
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.TimeAsString">
            <value>
            Returns time as string in currently edited format
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.Time">
            <value>
            Time
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.Editable">
            <value>
            Specifies if widget is editable or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.TimeEntry.Selected">
            <value>
            Specifies selected part
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnTimeChanged">
            <summary>
            Executes TimeChanged event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnStartCalculator">
            <summary>
            Exeutes StartCalculator event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnClearData">
            <summary>
            Executes ClearData event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnDropDown">
            <summary>
            Executes DropDown event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.GetTimeAsString(System.DateTime)">
            <value>
            Returns time as string in currently edited format
            </value>
            <param name="aTime">
            Time <see cref="T:System.DateTime" /></param>
            <returns>
            Time as string <see cref="T:System.String" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.ResetEditingParts">
            <summary>
            Resets editing parts
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.GetTimePart(Gtk.ExtraWidgets.TimeEntry.DataPart)">
            <summary>
            Gets label which displays specified part
            </summary>
            <param name="aPart">
            Part <see cref="T:Gtk.ExtraWidgets.TimeEntry.DataPart" /></param>
            <returns>
            Label cell <see cref="T:Gtk.ExtraWidgets.TimeEntry.TimeText" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.SetTime(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets time by preserving the date part
            </summary>
            <param name="aHour">
            Hour <see cref="T:System.Int32" /></param>
            <param name="aMinute">
            Minute <see cref="T:System.Int32" /></param>
            <param name="aSecond">
            Second <see cref="T:System.Int32" /></param>
            <param name="aMillisecond">
            Millisecond <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.RefreshLabels">
            <summary>
            Refreshes labels and redraws
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.SelectNext">
            <summary>
            Selects next part
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.SelectPrev">
            <summary>
            Selects previous part
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.PostEditing">
            <summary>
            Posts editing to current selection
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.ResetEditing">
            <summary>
            Posts editing to current selection and resets
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnPropertyChanged(System.String)">
            <summary>
            Method calls PropertyChanged if it is not null, but it allows external
            objects to access this one for convinience
            </summary>
            <param name="aPropertyName">
            Name of the property which changed <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnFocusInEvent(Gdk.EventFocus)">
            <summary>
            Handles focus in event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventFocus" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnFocusOutEvent(Gdk.EventFocus)">
            <summary>
            Handles focus out event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventFocus" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            Handles SizeRequested message
            </summary>
            <param name="requisition">
            Requisition <see cref="T:Gtk.Requisition" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnKeyPressEvent(Gdk.EventKey)">
            <summary>
            Handles KeyPress event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventKey" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnKeyReleaseEvent(Gdk.EventKey)">
            <summary>
            Handles KeyRelease event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventKey" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.OnButtonPressEvent(Gdk.EventButton)">
            <summary>
            Handles ButtonPress event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventButton" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.StoreBuffer">
            <summary>
            Stores buffer
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.TimeEntry.CreateBox">
            <summary>
            Creates DrawingCellBox
            </summary>
            <returns>
            Created box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellExtensionMethods">
            <summary>
            Provides extension methods for DrawingCell types
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.DrawingCellExtensionMethods.IsInsideArea(Gtk.ExtraWidgets.IDrawingCell,Cairo.Rectangle)">
            <summary>
            Checks if cell area is inside of clipping area
            </summary>
            <param name="aCell">
            A <see cref="T:Gtk.ExtraWidgets.IDrawingCell" /></param>
            <param name="aClippingArea">
            Cllipping rectangle <see cref="T:Cairo.Rectangle" /></param>
            <returns>
            true if area intersects with clipping area, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellActivePixbuf">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellGtkState">
            <summary>
            Specifies cell which can specify state or resolve it from owner
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkState.OwnerState">
            <value>
            Resolves owners state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkState.CustomState">
            <value>
            Custom specified state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkState.StateResolving">
            <value>
            Method used to resolve state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkState.State">
            <value>
            State as resolved trough specified state resolving method
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellXSpacing">
            <summary>
            Cell which provides fixed width separator
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellYSpacing">
            <summary>
            Cell which provides fixed height separator
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellComboArrow">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.CellRectangle">
            <summary>
            Same as cairo rectangle but less consuming on allocation since
            values can be modified
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellRectangle.IsInsideArea(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Checks if rectangle is inside of clipping area
            </summary>
            <param name="aClippingArea">
            Cllipping rectangle <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
            <returns>
            true if area intersects with clipping area, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.CellRectangle.Grow(System.Double)">
            <summary>
            Grows it by specified number
            </summary>
            <param name="aGrowFor">
            Growth size <see cref="T:System.Double" /></param>
            <returns>
            New rectangle <see cref="T:Cairo.Rectangle" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.IPv4Entry">
            <summary>
            Specifies widget usable for entering ip
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.IPv4Entry.StartCalculator">
            <summary>
            Event triggered on start calculator
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.IPv4Entry.PropertyChanged">
            <summary>
            PropertyChanged delegate as specified in INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.IPv4Entry.Editable">
            <value>
            Specifies if widget is editable or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.IPv4Entry.OnStartCalculator">
            <summary>
            Exeutes StartCalculator event
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.IPv4Entry.OnPropertyChanged(System.String)">
            <summary>
            Method calls PropertyChanged if it is not null, but it allows external
            objects to access this one for convinience
            </summary>
            <param name="aPropertyName">
            Name of the property which changed <see cref="T:System.String" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.IPv4Entry.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            Handles SizeRequested message
            </summary>
            <param name="requisition">
            Requisition <see cref="T:Gtk.Requisition" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.IPv4Entry.CreateBox">
            <summary>
            Creates DrawingCellBox
            </summary>
            <returns>
            Created box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.ExtraWidgets.MonthViewCalendarWidget">
            <summary>
            Provides widget which displays month view
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.MonthViewCalendarWidget.DayDescriptionRequest">
            <summary>
            Handles requests for descriptions
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.MonthViewCalendarWidget.CellPerDay(System.Int32)">
            <summary>
            Returns box which contains cells describing single day
            </summary>
            <param name="aDay">
            A <see cref="T:System.Int32" /></param>
            <returns>
            A <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.MonthViewCalendarWidget.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            Handles SizeRequested message
            </summary>
            <param name="requisition">
            Requisition <see cref="T:Gtk.Requisition" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.DrawingCellGtkStateBin">
            <summary>
            Provides classic bin with support to specify state
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkStateBin.OwnerState">
            <value>
            Resolves owners state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkStateBin.CustomState">
            <value>
            Custom specified state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkStateBin.StateResolving">
            <value>
            Method used to resolve state
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.DrawingCellGtkStateBin.State">
            <value>
            State as resolved trough specified state resolving method
            </value>
        </member>
        <member name="T:Gtk.ExtraWidgets.LinkLabel">
            <summary>
            </summary>
        </member>
        <member name="E:Gtk.ExtraWidgets.LinkLabel.LinkClicked">
            <summary>
            Event passed when link is clicked
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.LinkText">
            <value>
            Specifies text displayed in Label
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.LinkURL">
            <value>
            Specifies destination url
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.DisplayText">
            <value>
            Specifies text which is displayed
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.TargetUrl">
            <value>
            Specifies text which is displayed
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.IconVisible">
            <value>
            Specifies if link icon is visible or not
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.LinkLabel.Pixbuf">
            <value>
            Specifies pixbuf shown as icon
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.OnLinkClicked">
            <summary>
            Executes link click registered delegates
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.ResetLayout">
            <summary>
            Resets layout of the widget
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.OnButtonPressEvent(Gdk.EventButton)">
            <summary>
            Mothod handling mouse button press event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventButton" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.FillSelectionData(Gtk.SelectionData,System.UInt32)">
            <summary>
            Fills selection with data
            </summary>
            <param name="aData">
            Data <see cref="T:Gtk.SelectionData" /></param>
            <param name="aInfo">
            Type <see cref="T:System.UInt32" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.HandleDragBegin(System.Object,Gtk.DragBeginArgs)">
            <summary>
            Handles drag begin
            </summary>
            <param name="o">
            Object <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.DragBeginArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.HandleDragDataGet(System.Object,Gtk.DragDataGetArgs)">
            <summary>
            Starts filling data into selection
            </summary>
            <param name="o">
            Object <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.DragDataGetArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.LinkLabel.CreateBox">
            <summary>
            Creates new box
            </summary>
            <returns>
            Returns horizontal cell box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.GtkResources">
            <summary>
            Takes care for Gtk resources
            </summary>
        </member>
        <member name="M:Gtk.GtkResources.LoadPictureResource(System.String)">
            <summary>
            Loads Gdk.Pixbuf resource
            </summary>
            <param name="aName">
            Picture resource name <see cref="T:System.String" /></param>
            <returns>
            Picture object <see cref="T:System.Object" /></returns>
        </member>
        <member name="M:Gtk.GtkResources.RegisterDefaultResourceHandler">
            <summary>
            Registers default resource handler for picture resources
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.ColorLabel">
            <summary>
            </summary>
        </member>
        <member name="F:Gtk.ExtraWidgets.ColorLabel.name">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IAdaptableControl" /></returns>
        </member>
        <member name="E:Gtk.ExtraWidgets.ColorLabel.ColorClicked">
            <summary>
            Event passed when link is clicked
            </summary>
        </member>
        <member name="P:Gtk.ExtraWidgets.ColorLabel.ResolveColorNames">
            <value>
            Specifies if color names should be resolved trough responsible event registered in ColorNames
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ColorLabel.ColorName">
            <value>
            Specifies name of the color
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ColorLabel.Color">
            <value>
            Specifies destination url
            </value>
        </member>
        <member name="P:Gtk.ExtraWidgets.ColorLabel.NameVisible">
            <value>
            Specifies if link icon is visible or not
            </value>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.OnColorClicked">
            <summary>
            Executes link click registered delegates
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.ResetLayout">
            <summary>
            Resets layout of the widget
            </summary>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.OnButtonPressEvent(Gdk.EventButton)">
            <summary>
            Mothod handling mouse button press event
            </summary>
            <param name="evnt">
            Arguments <see cref="T:Gdk.EventButton" /></param>
            <returns>
            true if handled, false if not <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.FillSelectionData(Gtk.SelectionData,System.UInt32)">
            <summary>
            Fills selection with data
            </summary>
            <param name="aData">
            Data <see cref="T:Gtk.SelectionData" /></param>
            <param name="aInfo">
            Type <see cref="T:System.UInt32" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.HandleDragBegin(System.Object,Gtk.DragBeginArgs)">
            <summary>
            Handles drag begin
            </summary>
            <param name="o">
            Object <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.DragBeginArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.HandleDragDataGet(System.Object,Gtk.DragDataGetArgs)">
            <summary>
            Starts filling data into selection
            </summary>
            <param name="o">
            Object <see cref="T:System.Object" /></param>
            <param name="args">
            Arguments <see cref="T:Gtk.DragDataGetArgs" /></param>
        </member>
        <member name="M:Gtk.ExtraWidgets.ColorLabel.CreateBox">
            <summary>
            Creates new box
            </summary>
            <returns>
            Returns horizontal cell box <see cref="T:Gtk.ExtraWidgets.DrawingCellBox" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.ColorNames">
            <summary>
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererDrawingCell">
            <summary>
            Provides custom cell rendered CellRenderer
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.MainBox">
            <value>
            Provides access to master cell
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.Cells">
            <value>
            Access to cells
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.DoubleBuffered">
            <value>
            Spceifies if cell should be drawn by double buffering or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.Padding">
            <value>
            Spacing between cells
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.MasterWidget">
            <value>
            Widget responsible for drawing
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.Count">
            <value>
            Cell count
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererDrawingCell.PangoContext">
            <value>
            Specifies pango context which is used to draw text for cell
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.GetSize(Gtk.Widget,Gdk.Rectangle@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Resolves size of cell renderer
            </summary>
            <param name="widget">
            Widget <see cref="T:Gtk.Widget" /></param>
            <param name="cell_area">
            Area <see cref="T:Gdk.Rectangle" /></param>
            <param name="x_offset">
            X offset <see cref="T:System.Int32" /></param>
            <param name="y_offset">
            Y offset <see cref="T:System.Int32" /></param>
            <param name="width">
            Width <see cref="T:System.Int32" /></param>
            <param name="height">
            Height <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.PaintCells(Gdk.Drawable,Cairo.Context,Gtk.ExtraWidgets.CellRectangle,Gtk.CellRendererState)">
            <summary>
            Method which paints cells
            </summary>
            <param name="aDrawable">
            Window drawable <see cref="T:Gdk.Drawable" /></param>
            <param name="aContext">
            Cairo context <see cref="T:Cairo.Context" /></param>
            <param name="aArea">
            Area <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
            <param name="aFlags">
            Flags <see cref="T:Gtk.CellRendererState" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.CalculateCellAreas(Gtk.ExtraWidgets.CellRectangle)">
            <summary>
            Calculates cell areas
            </summary>
            <param name="aRect">
            Area occupied by widget <see cref="T:Gtk.ExtraWidgets.CellRectangle" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.Render(Gdk.Drawable,Gtk.Widget,Gdk.Rectangle,Gdk.Rectangle,Gdk.Rectangle,Gtk.CellRendererState)">
            <summary>
            Renders cell on provided space
            </summary>
            <param name="window">
            Drawable <see cref="T:Gdk.Drawable" /></param>
            <param name="widget">
            Widget <see cref="T:Gtk.Widget" /></param>
            <param name="background_area">
            Area for background <see cref="T:Gdk.Rectangle" /></param>
            <param name="cell_area">
            Cell area <see cref="T:Gdk.Rectangle" /></param>
            <param name="expose_area">
            Expose area <see cref="T:Gdk.Rectangle" /></param>
            <param name="aFlags">
            State flags <see cref="T:Gtk.CellRendererState" /></param>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.InitArea">
            <summary>
            Initializes area
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererDrawingCell.CreateBox">
            <summary>
            Creates main box which defines basic layout
            </summary>
            <returns>
            Box <see cref="T:Gtk.ExtraWidgets.DrawingCellPaintedBox" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererSimpleColor">
            <summary>
            Provides cell renderer for simple color box
            </summary>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererSimpleColor.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="T:Gtk.DataBindings.CellRendererExtensionMethods">
            <summary>
            Provides methods which extend CellRenderers
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.MappedCellRendererIp">
            <summary>
            Specifies cell renderer which handles date
            </summary>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererIp.IsImportant">
            <value>
            Defines if text is important (bold) or not
            </value>
        </member>
        <member name="P:Gtk.DataBindings.MappedCellRendererIp.Ip">
            <value>
            Specifies property which is used to assign value
            </value>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererIp.DefaultFactoryCreate(System.Data.Bindings.FactoryInvocationArgs)">
            <summary>
            Registered factory creation method
            </summary>
            <param name="aArgs">
            Arguments <see cref="T:System.Data.Bindings.FactoryInvocationArgs" /></param>
            <returns>
            Result widget <see cref="T:System.Data.Bindings.IMappedColumnItem" /></returns>
        </member>
        <member name="M:Gtk.DataBindings.MappedCellRendererIp.AssignValue(System.Object)">
            <summary>
            Assigns value to this column
            </summary>
            <param name="aValue">
            Value to be assigned <see cref="T:System.Object" /></param>
        </member>
        <member name="T:Gtk.DataBindings.ModeButtonEventHandler">
            <summary>
            Specifies delegate method for ModeButton events
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.DateChangedEvent">
            <summary>
            Event sent on date changed
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.CheckControlEvent">
            <summary>
            Event sent to notifiy tree/list widget is needed to clear selection
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ClearSelectionEvent">
            <summary>
            Event sent to notifiy tree/list widget is needed to clear selection
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ResetModelEvent">
            <summary>
            Event sent to notifiy tree/list widget is needed to clear model
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ClearColumnsEvent">
            <summary>
            Event sent to notifiy widget is needed to clear column information
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ListElementCellParams">
            <summary>
            Event for decribing every cell in ComBox or TreeView. Difference is
            that this one passes IList and object instead of TreeViewModel
            </summary>
            <param name="aList">
            List object resides in <see cref="T:System.Collections.IList" /></param>
            <param name="aPath">
            Path to access object <see cref="T:System.Int32" /></param>
            <param name="aObject">
            Object to be drawn <see cref="T:System.Object" /></param>
            <param name="aCell">
            CellRenderer to be used to draw <see cref="T:Gtk.CellRenderer" /></param>
        </member>
        <member name="T:Gtk.DataBindings.ListElementCellParamsEvent">
            <summary>
            Event for decribing every cell in ComBox or TreeView. Difference is
            that this one passes IList and object instead of TreeViewModel
            </summary>
            <param name="aList">
            List object resides in <see cref="T:System.Object" /></param>
            <param name="aPath">
            Path to access object <see cref="T:System.Int32" /></param>
            <param name="aObject">
            Object to be drawn <see cref="T:System.Object" /></param>
            <param name="aCell">
            CellRenderer to be used to draw <see cref="T:Gtk.CellRenderer" /></param>
        </member>
        <member name="T:Gtk.DataBindings.CellDescriptionEvent">
            <summary>
            Event for decribing every cell in ComBox or TreeView. Difference is
            that this one passes object instead of TreeViewModel
            </summary>
            <param name="aColumn">
            Object that sent message <see cref="T:Gtk.TreeViewColumn" /></param>
            <param name="aObject">
            Object to be drawn <see cref="T:System.Object" /></param>
            <param name="aCell">
            CellRenderer to be used to draw <see cref="T:Gtk.CellRenderer" /></param>
        </member>
        <member name="T:Gtk.ExtraWidgets.ColorClickedEvent">
            <summary>
            Delegate event on color clicked
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.LinkClickedEvent">
            <summary>
            Delegate event on link clicked
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.TimeChangedEvent">
            <summary>
            Event triggered on time change
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.ActivatedEvent">
            <summary>
            Event sent on object activation
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.HorizontalComboBoxEvent">
            <summary>
            Delegate method inistantiated on cell change
            </summary>
        </member>
        <member name="T:Gtk.ExtraWidgets.EnumCellChangedEvent">
            <summary>
            Delegate method inistantiated on cell change
            </summary>
        </member>
        <member name="T:Gtk.DataBindings.ResolveColorNameEvent">
            <summary>
            </summary>
        </member>
    </members>
</doc>
